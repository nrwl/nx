common-env-vars: &common-env-vars
  GIT_AUTHOR_EMAIL: test@test.com
  GIT_AUTHOR_NAME: Test
  GIT_COMMITTER_EMAIL: test@test.com
  GIT_COMMITTER_NAME: Test
  SELECTED_PM: 'pnpm'
  NX_NATIVE_LOGGING: 'nx::native::db'
  # These are need for build and link validation for next.js and astro apps
  NEXT_PUBLIC_ASTRO_URL: 'https://master--nx-docs.netlify.app'
  NX_DEV_URL: 'https://canary.nx.dev'

common-init-steps: &common-init-steps
  - name: Checkout
    uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/checkout/main.yaml'

  - name: Cache restore
    uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/cache/main.yaml'
    inputs:
      key: 'pnpm-lock.yaml'
      paths: .pnpm-store
      base-branch: 'master'

  # reads mise.toml and installs toolchains needed for repo
  - name: Setup toolchains
    uses: 'nrwl/nx-cloud-workflows/v5/workflow-steps/install-mise/main.yaml'

  - name: Verify toolchain versions
    script: |
      echo "mise:   $(mise --version)"
      echo "node:   $(node --version)"
      echo "pnpm:   $(pnpm --version)"
      echo "bun:    $(bun --version)"
      echo "rust:   $(rustc --version) - $(cargo --version)"
      echo "dotnet: $(dotnet --version)"
      echo "java:   $(javac --version)"

  - name: Install system deps
    script: |
      sudo apt-get update
      sudo apt-get install -y ca-certificates lsof libvips-dev libglib2.0-dev libgirepository1.0-dev zip unzip

  - name: Pnpm Install from lockfile
    script: |
      pnpm install --frozen-lockfile

  - name: Install browsers
    script: |
      pnpm exec cypress install
      pnpm exec playwright install --with-deps

  - name: Install rust deps
    script: |
      cargo fetch

  - name: Setup gradle
    script: |
      ./gradlew wrapper
      ./gradlew --version

  - name: Configure git metadata (needed for lerna smoke tests)
    script: |
      git config --global user.email test@test.com
      git config --global user.name "Test Test"

launch-templates:
  linux-large:
    resource-class: 'docker_linux_amd64/large'
    image: 'us-east1-docker.pkg.dev/nxcloudoperations/nx-cloud/nx-agents-base-images:ubuntu22.04-node20.19-v1'
    env: *common-env-vars
    init-steps: *common-init-steps

  linux-extra-large:
    resource-class: 'docker_linux_amd64/extra_large'
    image: 'us-east1-docker.pkg.dev/nxcloudoperations/nx-cloud/nx-agents-base-images:ubuntu22.04-node20.19-v1'
    env: *common-env-vars
    init-steps: *common-init-steps
