---
description: 
globs: docs/**,nx-dev/**
alwaysApply: false
---
- **Nx Documentation Structure**
  - The main navigation for Nx docs is defined in [map.json](mdc:docs/map.json).
  - The top-level sections under the `nx-documentation` id are:
    - Getting Started
    - Features
    - Concepts
    - Recipes
    - Enterprise
    - Showcase
    - Reference
    - Troubleshooting
    - Deprecated
    - See Also
  - Each section can contain nested `itemList` arrays for sub-navigation.

- **API References and Packages**
  - The `additional-api-references` section lists main Nx-related packages, each as a top-level entry:
    - nx, workspace, plugin, devkit, js, web, esbuild, vite, vue, nuxt, webpack, angular, angular-rspack, angular-rsbuild, react, jest, cypress, playwright, storybook, eslint, eslint-plugin, node, express, nest, next, remix, rspack, detox, react native, expo, owners, conformance, azure-cache, gcs-cache, s3-cache, shared-fs-cache, gradle, Module Federation
  - Each package can have its own nested documentation structure.

- **Restructuring Guidance**
  - When restructuring ensure all navigation changes in [map.json](mdc:docs/map.json) are reflected in the Next.js app and related files as per [workspace-architecture](mdc:.cursor/rules/workspace-architecture.mdc).

- **Best Practices**
  - Keep the documentation structure DRY and consistent.
  - Reference actual files and navigation structure in rules and documentation.
  - Update this rule when new top-level sections or packages are added or restructured.

- **File Movement Policy**
  - When updating the navigation structure (e.g., moving a doc to a new section), only update the references in [map.json](mdc:docs/map.json).
  - Do not move or rename the actual markdown files on the filesystem as part of navigation restructuring.
  - Physical file moves should be performed as a separate, explicit task to minimize risk and keep changes isolated.

- **Documentation Generation Workflow**
  - All documentation content is generated by [`scripts/documentation/generators/main.ts`](mdc:scripts/documentation/generators/main.ts).
  - This script is triggered by the `documentation` target in [`project.json`](mdc:project.json).
  - The script orchestrates the generation of:
    - CLI documentation
    - CNW documentation
    - Devkit documentation
    - Local and external package schemas
    - Documentation manifests
  - The output is written to `docs/generated` and related folders.
  - The script is run automatically:
    - Before pushes (as part of the `prepush` target)
    - As part of CI/CD and documentation workflows
  - After generation, the script checks for uncommitted changes in `docs/` and prompts the user to commit them if needed.
  - For more details, see the implementation in [`main.ts`](mdc:scripts/documentation/generators/main.ts) and the configuration in [`project.json`](mdc:project.json).

- **Updating the Menu Structure**
  - When you update the navigation or menu structure (for example, by editing [`docs/map.json`](mdc:docs/map.json)), you must run the documentation generation script to regenerate `menu.json` and related manifest files.
  - **Step-by-step process:**
    1. Edit [`docs/map.json`](mdc:docs/map.json) to update the navigation/menu structure.
    2. Run the documentation generation script via the Nx target:
       ```sh
       nx run @nx/nx-source:documentation
       ```
       or directly:
       ```sh
       ts-node -P scripts/tsconfig.scripts.json ./scripts/documentation/generators/main.ts
       ```
    3. Commit both your changes to `map.json` and the newly generated files in `docs/generated`.
  - This ensures the menu and navigation artifacts (such as `menu.json`) are always in sync with your changes and the documentation site navigation is up to date.
