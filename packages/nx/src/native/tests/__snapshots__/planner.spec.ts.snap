// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`task planner dependentTasksOutputFiles should depend on dependent tasks output files 1`] = `
{
  "parent:build": [
    "workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]",
    "env:NX_CLOUD_ENCRYPTION_KEY",
    "parent:!{projectRoot}/**/*.spec.ts",
    "parent:ProjectConfiguration",
    "parent:TsConfig",
    "**/*.d.ts:dist/libs/child",
    "**/*.d.ts:dist/libs/grandchild",
    "AllExternalDependencies",
  ],
}
`;

exports[`task planner should be able to handle multiple filesets per project 1`] = `
{
  "parent:test": [
    "workspace:[{workspaceRoot}/global1]",
    "workspace:[{workspaceRoot}/global2]",
    "workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]",
    "env:MY_TEST_HASH_ENV",
    "env:NX_CLOUD_ENCRYPTION_KEY",
    "child:!{projectRoot}/**/*.spec.ts",
    "parent:{projectRoot}/**/*",
    "child:ProjectConfiguration",
    "parent:ProjectConfiguration",
    "child:TsConfig",
    "parent:TsConfig",
    "AllExternalDependencies",
  ],
}
`;

exports[`task planner should build plans where the project graph has circular dependencies 1`] = `
{
  "child:build": [
    "workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]",
    "env:NX_CLOUD_ENCRYPTION_KEY",
    "child:{projectRoot}/**/*",
    "parent:{projectRoot}/**/*",
    "child:ProjectConfiguration",
    "parent:ProjectConfiguration",
    "child:TsConfig",
    "parent:TsConfig",
    "AllExternalDependencies",
  ],
  "parent:build": [
    "workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]",
    "env:NX_CLOUD_ENCRYPTION_KEY",
    "child:{projectRoot}/**/*",
    "parent:{projectRoot}/**/*",
    "child:ProjectConfiguration",
    "parent:ProjectConfiguration",
    "child:TsConfig",
    "parent:TsConfig",
    "AllExternalDependencies",
  ],
}
`;

exports[`task planner should hash executors 1`] = `
{
  "proj:lint": [
    "workspace:[{workspaceRoot}/global1]",
    "workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]",
    "env:NX_CLOUD_ENCRYPTION_KEY",
    "proj:{projectRoot}/**/*",
    "proj:ProjectConfiguration",
    "proj:TsConfig",
    "npm:@nx/devkit",
    "npm:@nx/eslint",
  ],
}
`;

exports[`task planner should include npm projects 1`] = `
{
  "app:build": [
    "workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]",
    "env:NX_CLOUD_ENCRYPTION_KEY",
    "app:{projectRoot}/**/*",
    "app:ProjectConfiguration",
    "app:TsConfig",
    "npm:react",
    "AllExternalDependencies",
  ],
}
`;

exports[`task planner should make a plan with multiple filesets of a project 1`] = `
{
  "parent:build": [
    "workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]",
    "env:NX_CLOUD_ENCRYPTION_KEY",
    "parent:!{projectRoot}/**/*.spec.ts",
    "parent:ProjectConfiguration",
    "parent:TsConfig",
    "AllExternalDependencies",
  ],
  "parent:test": [
    "workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]",
    "env:NX_CLOUD_ENCRYPTION_KEY",
    "parent:{projectRoot}/**/*",
    "parent:ProjectConfiguration",
    "parent:TsConfig",
    "AllExternalDependencies",
  ],
}
`;

exports[`task planner should plan non-default filesets 1`] = `
{
  "parent:build": [
    "workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]",
    "env:NX_CLOUD_ENCRYPTION_KEY",
    "child:{projectRoot}/**/*",
    "parent:!{projectRoot}/**/*.spec.ts",
    "child:ProjectConfiguration",
    "parent:ProjectConfiguration",
    "child:TsConfig",
    "parent:TsConfig",
    "AllExternalDependencies",
  ],
}
`;

exports[`task planner should plan the task where the project has dependencies 1`] = `
{
  "parent:build": [
    "workspace:[{workspaceRoot}/nx.json,{workspaceRoot}/.gitignore,{workspaceRoot}/.nxignore]",
    "env:NX_CLOUD_ENCRYPTION_KEY",
    "child:{projectRoot}/**/*",
    "grandchild:{projectRoot}/**/*",
    "parent:{projectRoot}/**/*",
    "child:ProjectConfiguration",
    "grandchild:ProjectConfiguration",
    "parent:ProjectConfiguration",
    "child:TsConfig",
    "grandchild:TsConfig",
    "parent:TsConfig",
    "AllExternalDependencies",
  ],
}
`;
