const { composePlugins, withNx, withReact } = require('@nx/rspack');
const { withModuleFederation } = require('@nx/module-federation/rspack');

const baseConfig = require('./module-federation.config');

const prodConfig = {
    ...baseConfig,
    /*
     * Remote overrides for production.
     * Each entry is a pair of a unique name and the URL where it is deployed.
     *
     * e.g.
     * remotes: [
     *   ['app1', 'http://app1.example.com'],
     *   ['app2', 'http://app2.example.com'],
     * ]
     *
     * You can also use a full path to the remoteEntry.js file if desired.
     *
     * remotes: [
     *   ['app1', 'http://example.com/path/to/app1/remoteEntry.js'],
     *   ['app2', 'http://example.com/path/to/app2/remoteEntry.js'],
     * ]
     */
    remotes: [
    <%_ remotes.forEach(function(r) { _%>
    ['<%= r.fileName %>', 'http://localhost:<%= r.port %>/'],
    <%_ }); _%>
    ],
};

// Nx plugins for rspack to build config object from Nx options and context.
/**
 * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation
 * The DTS Plugin can be enabled by setting dts: true
 * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html
 */
module.exports = composePlugins(withNx(), withReact(), withModuleFederation(prodConfig, { dts: false }));
