// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`app --bundler=rsbuild should generate valid rsbuild config files for @emotion/styled 1`] = `
"import styled from '@emotion/styled';
import NxWelcome from "./nx-welcome";

const StyledApp = styled.div\`
    // Your style here
\`;

export function App() {
  return (
    <StyledApp>
      <NxWelcome title="my-app"/>
    </StyledApp>
  );
}

export default App;

"
`;

exports[`app --bundler=rsbuild should generate valid rsbuild config files for @emotion/styled 2`] = `
"import { pluginReact } from '@rsbuild/plugin-react';
  import { defineConfig } from '@rsbuild/core';

export default defineConfig({
	html: {
		template: './src/index.html'
	},	
	tools: {
		swc: {
			jsc: {
				experimental: {
					plugins: [
						['@swc/plugin-emotion', {}],
					], 
				},
			},
		},
	},
	plugins: [pluginReact(swcReactOptions: {
		importSource: '@emotion/react',
	})],
	
    source: {
        entry: {
            index: './src/main.tsx'
        },
        tsconfigPath: './tsconfig.app.json',
    },
    server: {
        port: 4200
    },
    output: {
		copy: [
		{ from: './src/favicon.ico' },
		{ from: './src/assets' }],
	
        target: 'web',
        distPath: {
            root: 'dist',
        },
    }
});
"
`;

exports[`app --bundler=rsbuild should generate valid rsbuild config files for styled-components 1`] = `
"import styled from 'styled-components';
import NxWelcome from "./nx-welcome";

const StyledApp = styled.div\`
    // Your style here
\`;

export function App() {
  return (
    <StyledApp>
      <NxWelcome title="my-app"/>
    </StyledApp>
  );
}

export default App;

"
`;

exports[`app --bundler=rsbuild should generate valid rsbuild config files for styled-components 2`] = `
"import { pluginStyledComponents } from '@rsbuild/plugin-styled-components';
  import { pluginReact } from '@rsbuild/plugin-react';
  import { defineConfig } from '@rsbuild/core';

export default defineConfig({
	html: {
		template: './src/index.html'
	},	
	plugins: [
		pluginReact(),
		pluginStyledComponents()
	],
	
    source: {
        entry: {
            index: './src/main.tsx'
        },
        tsconfigPath: './tsconfig.app.json',
    },
    server: {
        port: 4200
    },
    output: {
		copy: [
		{ from: './src/favicon.ico' },
		{ from: './src/assets' }],
	
        target: 'web',
        distPath: {
            root: 'dist',
        },
    }
});
"
`;

exports[`app --bundler=rsbuild should generate valid rsbuild config files for styled-jsx 1`] = `
"import NxWelcome from "./nx-welcome";

export function App() {
  return (
    <div>
      <style jsx>{\`/** your style here **/\`}</style>
      <NxWelcome title="my-app"/>
    </div>
  );
}

export default App;


"
`;

exports[`app --bundler=rsbuild should generate valid rsbuild config files for styled-jsx 2`] = `
"import { pluginReact } from '@rsbuild/plugin-react';
  import { defineConfig } from '@rsbuild/core';

export default defineConfig({
	html: {
		template: './src/index.html'
	},	
	tools: {
		swc: {
			jsc: {
				experimental: {
					plugins: [
						['@swc/plugin-styled-jsx', {}],
					], 
				},
			},
		},
	},
	plugins: [pluginReact()],
	
    source: {
        entry: {
            index: './src/main.tsx'
        },
        tsconfigPath: './tsconfig.app.json',
    },
    server: {
        port: 4200
    },
    output: {
		copy: [
		{ from: './src/favicon.ico' },
		{ from: './src/assets' }],
	
        target: 'web',
        distPath: {
            root: 'dist',
        },
    }
});
"
`;

exports[`app --minimal should create default application without Nx welcome component 1`] = `
"// Uncomment this line to use CSS modules
// import styles from './app.module.css';

export function App() {
  return (
    <div>
      <h1>
        <span> Hello there, </span>
        Welcome plain ðŸ‘‹
      </h1>
    </div>
  );
}

export default App;

 
if (import.meta.vitest) {
  // add tests related to your file here
  // For more information please visit the Vitest docs site here: https://vitest.dev/guide/in-source.html
  
  const { it, expect, beforeEach } = import.meta.vitest;
  let render: typeof import('@testing-library/react').render;

  beforeEach(async () => {
    render = (await import('@testing-library/react')).render;
  });

  it('should render successfully', () => {
    const { baseElement } = render(<App />);
    expect(baseElement).toBeTruthy();
  });

  it('should have a greeting as the title', () => {
    const { getByText } = render(<App />);
    expect(getByText(/Welcome plain/gi)).toBeTruthy();
  });

}
 
"
`;

exports[`app --style @emotion/styled should exclude styles 1`] = `
"const { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');
const { NxReactWebpackPlugin } = require('@nx/react/webpack-plugin');
const { join } = require('path');

module.exports = {
  output: {
    path: join(__dirname, '../dist/my-app'),
  },
  devServer: {
    port: 4200,
    historyApiFallback: {
      index: '/index.html',
      disableDotRule: true,
      htmlAcceptHeaders: ['text/html', 'application/xhtml+xml'],
    },
  },
  plugins: [
    new NxAppWebpackPlugin({
      tsConfig: './tsconfig.app.json',
      compiler: 'babel',
      main: './src/main.tsx',
      index: './src/index.html',
      baseHref: '/',
      assets: ["./src/favicon.ico","./src/assets"],
      styles: [],
      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',
      optimization: process.env['NODE_ENV'] === 'production',
    }),
    new NxReactWebpackPlugin({
      // Uncomment this line if you don't want to use SVGR
      // See: https://react-svgr.com/
      // svgr: false
    }),
  ],
};
"
`;

exports[`app --style @emotion/styled should not break if bundler is vite 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { nxCopyAssetsPlugin } from '@nx/vite/plugins/nx-copy-assets.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/my-app',
  server:{
    port: 4200,
    host: 'localhost',
  },
  preview:{
    port: 4300,
    host: 'localhost',
  },
  plugins: [react(), nxViteTsPaths(), nxCopyAssetsPlugin(['*.md'])],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: '../dist/my-app',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
});
"
`;

exports[`app --style none should exclude styles 1`] = `
"const { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');
const { NxReactWebpackPlugin } = require('@nx/react/webpack-plugin');
const { join } = require('path');

module.exports = {
  output: {
    path: join(__dirname, '../dist/my-app'),
  },
  devServer: {
    port: 4200,
    historyApiFallback: {
      index: '/index.html',
      disableDotRule: true,
      htmlAcceptHeaders: ['text/html', 'application/xhtml+xml'],
    },
  },
  plugins: [
    new NxAppWebpackPlugin({
      tsConfig: './tsconfig.app.json',
      compiler: 'babel',
      main: './src/main.tsx',
      index: './src/index.html',
      baseHref: '/',
      assets: ["./src/favicon.ico","./src/assets"],
      styles: [],
      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',
      optimization: process.env['NODE_ENV'] === 'production',
    }),
    new NxReactWebpackPlugin({
      // Uncomment this line if you don't want to use SVGR
      // See: https://react-svgr.com/
      // svgr: false
    }),
  ],
};
"
`;

exports[`app --style none should not break if bundler is vite 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { nxCopyAssetsPlugin } from '@nx/vite/plugins/nx-copy-assets.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/my-app',
  server:{
    port: 4200,
    host: 'localhost',
  },
  preview:{
    port: 4300,
    host: 'localhost',
  },
  plugins: [react(), nxViteTsPaths(), nxCopyAssetsPlugin(['*.md'])],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: '../dist/my-app',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
});
"
`;

exports[`app --style scss should generate scss styles 1`] = `
"// Uncomment this line to use CSS modules
// import styles from './app.module.scss';
import NxWelcome from "./nx-welcome";

export function App() {
  return (
    <div>
      <NxWelcome title="my-app"/>
    </div>
  );
}

export default App;


"
`;

exports[`app --style tailwind should not generate any styles files 1`] = `
"import NxWelcome from './nx-welcome';

export function App() {
  return (
    <div>
      <NxWelcome title="my-app" />
    </div>
  );
}

export default App;
"
`;

exports[`app not nested should add vite types to tsconfigs 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { nxCopyAssetsPlugin } from '@nx/vite/plugins/nx-copy-assets.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/my-app',
  server: {
    port: 4200,
    host: 'localhost',
  },
  preview: {
    port: 4300,
    host: 'localhost',
  },
  plugins: [react(), nxViteTsPaths(), nxCopyAssetsPlugin(['*.md'])],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: '../dist/my-app',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
  test: {
    watch: false,
    globals: true,
    environment: 'jsdom',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
    reporters: ['default'],
    coverage: {
      reportsDirectory: '../coverage/my-app',
      provider: 'v8',
    },
  },
});
"
`;

exports[`app not nested should generate files 1`] = `
"// Uncomment this line to use CSS modules
// import styles from './app.module.css';
import NxWelcome from './nx-welcome';

export function App() {
  return (
    <div>
      <NxWelcome title="my-app" />
    </div>
  );
}

export default App;
"
`;

exports[`app not nested should use preview vite types to tsconfigs 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { nxCopyAssetsPlugin } from '@nx/vite/plugins/nx-copy-assets.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/my-app',
  server: {
    port: 4200,
    host: 'localhost',
  },
  preview: {
    port: 4300,
    host: 'localhost',
  },
  plugins: [react(), nxViteTsPaths(), nxCopyAssetsPlugin(['*.md'])],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: '../dist/my-app',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
  test: {
    watch: false,
    globals: true,
    environment: 'jsdom',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
    reporters: ['default'],
    coverage: {
      reportsDirectory: '../coverage/my-app',
      provider: 'v8',
    },
  },
});
"
`;

exports[`app setup React app with --bundler=vite should setup targets with vite configuration 1`] = `null`;

exports[`app should add custom webpack config 1`] = `
"const { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');
const { NxReactWebpackPlugin } = require('@nx/react/webpack-plugin');
const { join } = require('path');

module.exports = {
  output: {
    path: join(__dirname, '../dist/my-app'),
  },
  devServer: {
    port: 4200,
    historyApiFallback: {
      index: '/index.html',
      disableDotRule: true,
      htmlAcceptHeaders: ['text/html', 'application/xhtml+xml'],
    },
  },
  plugins: [
    new NxAppWebpackPlugin({
      tsConfig: './tsconfig.app.json',
      compiler: 'babel',
      main: './src/main.tsx',
      index: './src/index.html',
      baseHref: '/',
      assets: ["./src/favicon.ico","./src/assets"],
      styles: ["./src/styles.css"],
      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',
      optimization: process.env['NODE_ENV'] === 'production',
    }),
    new NxReactWebpackPlugin({
      // Uncomment this line if you don't want to use SVGR
      // See: https://react-svgr.com/
      // svgr: false
    }),
  ],
};
"
`;

exports[`app should create Nx specific template 1`] = `
"// Uncomment this line to use CSS modules
// import styles from './app.module.css';
import NxWelcome from "./nx-welcome";

export function App() {
  return (
    <div>
      <NxWelcome title="my-app"/>
    </div>
  );
}

export default App;


"
`;

exports[`app should generate valid .babelrc JSON config for CSS-in-JS solutions 1`] = `
"import styled from 'styled-components';
import NxWelcome from "./nx-welcome";

const StyledApp = styled.div\`
    // Your style here
\`;

export function App() {
  return (
    <StyledApp>
      <NxWelcome title="my-app"/>
    </StyledApp>
  );
}

export default App;

"
`;

exports[`app should generate valid .babelrc JSON config for CSS-in-JS solutions 2`] = `
"import NxWelcome from "./nx-welcome";

export function App() {
  return (
    <div>
      <style jsx>{\`/** your style here **/\`}</style>
      <NxWelcome title="my-app"/>
    </div>
  );
}

export default App;


"
`;

exports[`app should generate valid .babelrc JSON config for CSS-in-JS solutions 3`] = `
"import styled from '@emotion/styled';
import NxWelcome from "./nx-welcome";

const StyledApp = styled.div\`
    // Your style here
\`;

export function App() {
  return (
    <StyledApp>
      <NxWelcome title="my-app"/>
    </StyledApp>
  );
}

export default App;

"
`;

exports[`app should setup vite if bundler is vite 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { nxCopyAssetsPlugin } from '@nx/vite/plugins/nx-copy-assets.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/my-app',
  server:{
    port: 4200,
    host: 'localhost',
  },
  preview:{
    port: 4300,
    host: 'localhost',
  },
  plugins: [react(), nxViteTsPaths(), nxCopyAssetsPlugin(['*.md'])],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  build: {
    outDir: '../dist/my-app',
    emptyOutDir: true,
    reportCompressedSize: true,
    commonjsOptions: {
      transformMixedEsModules: true,
    },
  },
});
"
`;

exports[`app should setup webpack 1`] = `
"const { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');
const { NxReactWebpackPlugin } = require('@nx/react/webpack-plugin');
const { join } = require('path');

module.exports = {
  output: {
    path: join(__dirname, '../dist/my-app'),
  },
  devServer: {
    port: 4200,
    historyApiFallback: {
      index: '/index.html',
      disableDotRule: true,
      htmlAcceptHeaders: ['text/html', 'application/xhtml+xml'],
    },
  },
  plugins: [
    new NxAppWebpackPlugin({
      tsConfig: './tsconfig.app.json',
      compiler: 'babel',
      main: './src/main.tsx',
      index: './src/index.html',
      baseHref: '/',
      assets: ["./src/favicon.ico","./src/assets"],
      styles: ["./src/styles.css"],
      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',
      optimization: process.env['NODE_ENV'] === 'production',
    }),
    new NxReactWebpackPlugin({
      // Uncomment this line if you don't want to use SVGR
      // See: https://react-svgr.com/
      // svgr: false
    }),
  ],
};
"
`;
