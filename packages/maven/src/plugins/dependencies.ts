import { join } from 'path';
import { CreateDependencies, DependencyType } from '@nx/devkit';
import { getCachedMavenData } from './maven-data-cache';

/**
 * Create dependencies between Maven projects by analyzing the createNodesResults
 * Uses cached Maven analysis data that was generated by createNodesV2
 */
export const createDependencies: CreateDependencies = (_options, context) => {
  const dependencies = [];
  
  // Get cached Maven analysis data that was generated by createNodesV2
  const mavenData = getCachedMavenData(context.workspaceRoot);
  if (!mavenData) {
    console.log('[Maven Dependencies] No Maven data found in workspace:', context.workspaceRoot);
    return [];
  }
  
  console.log('[Maven Dependencies] Found Maven data with', mavenData.createNodesResults.length, 'projects');
  
  // Extract dependencies from the createNodesResults
  for (const [projectRoot, projectsWrapper] of mavenData.createNodesResults) {
    // The projects are keyed by their actual root directory, not the pom.xml path
    const projectKeys = Object.keys(projectsWrapper.projects);
    for (const projectKey of projectKeys) {
      const projectConfig = projectsWrapper.projects[projectKey];
      if (!projectConfig) {
        console.log('[Maven Dependencies] No project config for key:', projectKey);
        continue;
      }
      
      console.log('[Maven Dependencies] Processing project:', projectConfig.name, 'at', projectKey);

      // Look at the compile target's dependsOn to find Maven dependencies
      const compileTarget = projectConfig.targets?.compile;
      if (compileTarget && compileTarget.dependsOn) {
        console.log('[Maven Dependencies] Found', compileTarget.dependsOn.length, 'dependencies for', projectConfig.name);
        for (const dep of compileTarget.dependsOn) {
          // Handle both string and TargetDependencyConfig formats
          let targetProjectName: string | undefined;
          
          if (typeof dep === 'string') {
            // Dependencies are in format "projectName:phase"
            [targetProjectName] = dep.split(':');
          } else if (dep.target) {
            // TargetDependencyConfig format
            targetProjectName = dep.target;
          }
          
          if (targetProjectName && targetProjectName !== projectConfig.name) {
            console.log('[Maven Dependencies] Adding dependency:', projectConfig.name, '->', targetProjectName);
            dependencies.push({
              source: projectConfig.name!,
              target: targetProjectName,
              type: DependencyType.static,
              sourceFile: join(projectKey, 'pom.xml')
            });
          }
        }
      }
    }
  }
  
  return dependencies;
};