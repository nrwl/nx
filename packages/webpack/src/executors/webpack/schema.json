{
  "version": 2,
  "outputCapture": "direct-nodejs",
  "title": "Webpack builder",
  "description": "Build a project using webpack.",
  "cli": "nx",
  "type": "object",
  "properties": {
    "crossOrigin": {
      "type": "string",
      "description": "The `crossorigin` attribute to use for generated javascript script tags.  One of 'none' | 'anonymous' | 'use-credentials'."
    },
    "main": {
      "type": "string",
      "description": "The name of the main entry-point file.",
      "x-completion-type": "file",
      "x-completion-glob": "**/*@(.js|.ts|.tsx)",
      "x-priority": "important"
    },
    "tsConfig": {
      "type": "string",
      "description": "The name of the Typescript configuration file.",
      "x-completion-type": "file",
      "x-completion-glob": "tsconfig.*.json",
      "x-priority": "important"
    },
    "compiler": {
      "type": "string",
      "description": "The compiler to use.",
      "enum": ["babel", "swc", "tsc"]
    },
    "outputPath": {
      "type": "string",
      "description": "The output path of the generated files.",
      "x-completion-type": "directory",
      "x-priority": "important"
    },
    "target": {
      "type": "string",
      "alias": "platform",
      "description": "Target platform for the build, same as the Webpack target option.",
      "enum": ["node", "web", "webworker"]
    },
    "deleteOutputPath": {
      "type": "boolean",
      "description": "Delete the output path before building.",
      "default": true
    },
    "watch": {
      "type": "boolean",
      "description": "Enable re-building when files change."
    },
    "baseHref": {
      "type": "string",
      "description": "Base url for the application being built."
    },
    "deployUrl": {
      "type": "string",
      "description": "URL where the application will be deployed."
    },
    "vendorChunk": {
      "type": "boolean",
      "description": "Use a separate bundle containing only vendor libraries."
    },
    "commonChunk": {
      "type": "boolean",
      "description": "Use a separate bundle containing code used across multiple bundles."
    },
    "runtimeChunk": {
      "type": "boolean",
      "description": "Use a separate bundle containing the runtime."
    },
    "skipTypeChecking": {
      "alias": "typeCheck",
      "type": "boolean",
      "description": "Skip the type checking. Default is `false`."
    },
    "sourceMap": {
      "description": "Output sourcemaps. Use 'hidden' for use with error reporting tools without generating sourcemap comment.",
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ]
    },
    "progress": {
      "type": "boolean",
      "description": "Log progress to the console while building."
    },
    "poll": {
      "type": "number",
      "description": "Enable and define the file watching poll time period."
    },
    "assets": {
      "type": "array",
      "description": "List of static application assets.",
      "items": {
        "$ref": "#/definitions/assetPattern"
      }
    },
    "index": {
      "type": "string",
      "description": "HTML File which will be contain the application.",
      "x-completion-type": "file",
      "x-completion-glob": "**/*@(.html|.htm)"
    },
    "scripts": {
      "type": "array",
      "description": "External Scripts which will be included before the main application entry.",
      "items": {
        "$ref": "#/definitions/extraEntryPoint"
      }
    },
    "styles": {
      "type": "array",
      "description": "External Styles which will be included with the application",
      "items": {
        "$ref": "#/definitions/extraEntryPoint"
      }
    },
    "namedChunks": {
      "type": "boolean",
      "description": "Names the produced bundles according to their entry file."
    },
    "outputHashing": {
      "type": "string",
      "description": "Define the output filename cache-busting hashing mode.",
      "enum": ["none", "all", "media", "bundles"]
    },
    "stylePreprocessorOptions": {
      "description": "Options to pass to style preprocessors.",
      "type": "object",
      "properties": {
        "includePaths": {
          "description": "Paths to include. Paths will be resolved to project root.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "optimization": {
      "description": "Enables optimization of the build output.",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "scripts": {
              "type": "boolean",
              "description": "Enables optimization of the scripts output.",
              "default": true
            },
            "styles": {
              "type": "boolean",
              "description": "Enables optimization of the styles output.",
              "default": true
            }
          },
          "additionalProperties": false
        },
        {
          "type": "boolean"
        }
      ]
    },
    "generatePackageJson": {
      "type": "boolean",
      "description": "Generates a `package.json` and pruned lock file with the project's `node_module` dependencies populated for installing in a container. If a `package.json` exists in the project's directory, it will be reused with dependencies populated."
    },
    "skipOverrides": {
      "type": "boolean",
      "description": "Do not add a `overrides` and `resolutions` entries to the generated package.json file. Only works in conjunction with `generatePackageJson` option."
    },
    "skipPackageManager": {
      "type": "boolean",
      "description": "Do not add a `packageManager` entry to the generated package.json file. Only works in conjunction with `generatePackageJson` option."
    },
    "transformers": {
      "type": "array",
      "description": "List of TypeScript Compiler Transfomers Plugins.",
      "aliases": ["tsPlugins"],
      "items": {
        "$ref": "#/definitions/transformerPattern"
      }
    },
    "additionalEntryPoints": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "entryName": {
            "type": "string",
            "description": "Name of the additional entry file."
          },
          "entryPath": {
            "type": "string",
            "description": "Path to the additional entry file.",
            "x-completion-type": "file",
            "x-completion-glob": "**/*@(.js|.ts)"
          }
        }
      }
    },
    "outputFileName": {
      "type": "string",
      "description": "Name of the main output file.",
      "default": "main.js"
    },
    "externalDependencies": {
      "oneOf": [
        {
          "type": "string",
          "enum": ["none", "all"]
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ],
      "description": "Dependencies to keep external to the bundle. (`all` (default), `none`, or an array of module names)"
    },
    "extractCss": {
      "type": "boolean",
      "description": "Extract CSS into a `.css` file."
    },
    "subresourceIntegrity": {
      "type": "boolean",
      "description": "Enables the use of subresource integrity validation."
    },
    "polyfills": {
      "type": "string",
      "description": "Polyfills to load before application",
      "x-completion-type": "file",
      "x-completion-glob": "**/*@(.js|.ts|.tsx)"
    },
    "verbose": {
      "type": "boolean",
      "description": "Emits verbose output"
    },
    "statsJson": {
      "type": "boolean",
      "description": "Generates a 'stats.json' file which can be analyzed using tools such as: 'webpack-bundle-analyzer' or `<https://webpack.github.io/analyse>`."
    },
    "isolatedConfig": {
      "type": "boolean",
      "description": "Do not apply Nx webpack plugins automatically. Plugins need to be applied in the project's webpack.config.js file (e.g. withNx, withReact, etc.).",
      "default": true,
      "x-deprecated": "Automatic configuration of Webpack is deprecated in favor of an explicit 'webpack.config.js' file. This option will be removed in Nx 20. See https://nx.dev/recipes/webpack/webpack-config-setup."
    },
    "standardWebpackConfigFunction": {
      "type": "boolean",
      "description": "Set to true if the webpack config exports a standard webpack function, not an Nx-specific one. See: https://webpack.js.org/configuration/configuration-types/#exporting-a-function",
      "default": false
    },
    "extractLicenses": {
      "type": "boolean",
      "description": "Extract all licenses in a separate file, in the case of production builds only."
    },
    "memoryLimit": {
      "type": "number",
      "description": "Memory limit for type checking service process in `MB`."
    },
    "fileReplacements": {
      "description": "Replace files with other files in the build.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "replace": {
            "type": "string",
            "description": "The file to be replaced.",
            "x-completion-type": "file"
          },
          "with": {
            "type": "string",
            "description": "The file to replace with.",
            "x-completion-type": "file"
          }
        },
        "additionalProperties": false,
        "required": ["replace", "with"]
      }
    },
    "buildLibsFromSource": {
      "type": "boolean",
      "description": "Read buildable libraries from source instead of building them separately. If set to `false`, the `tsConfig` option must also be set to remap paths.",
      "default": true
    },
    "generateIndexHtml": {
      "type": "boolean",
      "description": "Generates `index.html` file to the output path. This can be turned off if using a webpack plugin to generate HTML such as `html-webpack-plugin`."
    },
    "postcssConfig": {
      "type": "string",
      "description": "Set a path to PostCSS config that applies to the app and all libs. Defaults to `undefined`, which auto-detects postcss.config.js files in each `app`/`lib` directory."
    },
    "webpackConfig": {
      "type": "string",
      "description": "Path to a function which takes a webpack config, some context and returns the resulting webpack config. See https://nx.dev/guides/customize-webpack",
      "x-completion-type": "file",
      "x-completion-glob": "webpack?(*)@(.js|.ts)",
      "x-priority": "important"
    },
    "babelUpwardRootMode": {
      "type": "boolean",
      "description": "Whether to set rootmode to upward. See https://babeljs.io/docs/en/options#rootmode"
    },
    "babelConfig": {
      "type": "string",
      "description": "Path to the babel configuration file of your project. If not provided, Nx will default to the .babelrc file at the root of your project. See https://babeljs.io/docs/en/config-files",
      "x-completion-type": "file"
    },
    "publicPath": {
      "type": "string",
      "description": "Set a public path for assets resources with absolute paths."
    },
    "rebaseRootRelative": {
      "type": "boolean",
      "description": "Whether to rebase absolute path for assets in postcss cli resources."
    }
  },
  "required": [],
  "definitions": {
    "assetPattern": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "glob": {
              "type": "string",
              "description": "The pattern to match."
            },
            "input": {
              "type": "string",
              "description": "The input directory path in which to apply 'glob'. Defaults to the project root."
            },
            "ignore": {
              "description": "An array of globs to ignore.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "output": {
              "type": "string",
              "description": "Absolute path within the output."
            }
          },
          "additionalProperties": false,
          "required": ["glob", "input", "output"]
        },
        {
          "type": "string"
        }
      ]
    },
    "extraEntryPoint": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "input": {
              "type": "string",
              "description": "The file to include.",
              "x-completion-type": "file",
              "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
            },
            "bundleName": {
              "type": "string",
              "description": "The bundle name for this extra entry point."
            },
            "inject": {
              "type": "boolean",
              "description": "If the bundle will be referenced in the HTML file.",
              "default": true
            }
          },
          "additionalProperties": false,
          "required": ["input"]
        },
        {
          "type": "string",
          "description": "The file to include.",
          "x-completion-type": "file",
          "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
        }
      ]
    },
    "transformerPattern": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "options": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false,
          "required": ["name"]
        }
      ]
    }
  },
  "examplesFile": "../../../docs/webpack-build-executor-examples.md"
}
