// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component Generator --module should import the component correctly to the module file when flat is false 1`] = `
"
import { NgModule } from '@angular/core';
import { Example } from './example/example';

@NgModule({
  declarations: [Example],
  exports: [Example]
})
export class LibModule {}
"
`;

exports[`component Generator secondary entry points should create the component correctly and export it in the entry point 1`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'example',
  standalone: false,
  templateUrl: './example.html',
  styleUrl: './example.css'
})
export class Example {}
"
`;

exports[`component Generator secondary entry points should create the component correctly and export it in the entry point 2`] = `
"export * from './lib/secondary.module';
export * from './lib/example/example';"
`;

exports[`component Generator should create component files correctly: component 1`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'example',
  standalone: false,
  templateUrl: './example.html',
  styleUrl: './example.css',
})
export class Example {}
"
`;

exports[`component Generator should create component files correctly: component test file 1`] = `
"import { ComponentFixture, TestBed } from '@angular/core/testing';
import { Example } from './example';

describe('Example', () => {
  let component: Example;
  let fixture: ComponentFixture<Example>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [Example],
    }).compileComponents();

    fixture = TestBed.createComponent(Example);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
"
`;

exports[`component Generator should create component files correctly: entry point file 1`] = `
"export * from './lib/lib.module';
"
`;

exports[`component Generator should create component files correctly: stylesheet 1`] = `""`;

exports[`component Generator should create component files correctly: template 1`] = `
"<p>example works!</p>
"
`;

exports[`component Generator should create the component correctly and export it in the entry point when "export=true" 1`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'example',
  standalone: false,
  templateUrl: './example.html',
  styleUrl: './example.css'
})
export class Example {}
"
`;

exports[`component Generator should create the component correctly and export it in the entry point when "export=true" 2`] = `
"export * from './lib/lib.module';
export * from './lib/example/example';"
`;

exports[`component Generator should create the component correctly and export it in the entry point when is standalone and "export=true" 1`] = `
"import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'example',
  imports: [CommonModule],
  templateUrl: './example.html',
  styleUrl: './example.css'
})
export class Example {}
"
`;

exports[`component Generator should create the component correctly and not export it in the entry point when "export=false" 1`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'example',
  standalone: false,
  templateUrl: './example.html',
  styleUrl: './example.css'
})
export class Example {}
"
`;

exports[`component Generator should create the component correctly and not export it in the entry point when is standalone and "export=false" 1`] = `
"import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'example',
  imports: [CommonModule],
  templateUrl: './example.html',
  styleUrl: './example.css'
})
export class Example {}
"
`;

exports[`component Generator should create the component correctly and not export it when "--skip-import=true" 1`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'example',
  standalone: false,
  templateUrl: './example.html',
  styleUrl: './example.css'
})
export class Example {}
"
`;

exports[`component Generator should create the component correctly but not export it in the entry point when it does not exist 1`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'example',
  standalone: false,
  templateUrl: './example.html',
  styleUrl: './example.css'
})
export class Example {}
"
`;

exports[`component Generator should handle path with file extension: component 1`] = `
"import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'example.component',
  imports: [CommonModule],
  templateUrl: './example.component.html',
  styleUrl: './example.component.css',
})
export class ExampleComponent {}
"
`;

exports[`component Generator should handle path with file extension: component test file 1`] = `
"import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ExampleComponent } from './example.component';

describe('ExampleComponent', () => {
  let component: ExampleComponent;
  let fixture: ComponentFixture<ExampleComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ExampleComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(ExampleComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
"
`;

exports[`component Generator should handle path with file extension: entry point file 1`] = `null`;

exports[`component Generator should handle path with file extension: stylesheet 1`] = `""`;

exports[`component Generator should handle path with file extension: template 1`] = `
"<p>example.component works!</p>
"
`;

exports[`component Generator should inline styles when --inline-style=true 1`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'example',
  standalone: false,
  templateUrl: './example.html',
  styles: \`\`
})
export class Example {}
"
`;

exports[`component Generator should inline template when --inline-template=true 1`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'example',
  standalone: false,
  template: \`<p>example works!</p>\`,
  styleUrl: './example.css'
})
export class Example {}
"
`;
