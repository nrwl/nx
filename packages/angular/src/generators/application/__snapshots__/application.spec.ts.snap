// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for non-standalone apps with routing 1`] = `
"import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';
import { AppComponent } from './app.component';
import { appRoutes } from './app.routes';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    RouterModule.forRoot(appRoutes),
  ],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for non-standalone apps with routing 2`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  standalone: false,
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {}
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for non-standalone apps with routing 3`] = `
"import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';
import { RouterModule } from '@angular/router';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RouterModule.forRoot([])],
      declarations: [AppComponent]
    }).compileComponents();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain(
      'Welcome plain'
    );
  });
});
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for non-standalone apps with routing 4`] = `
"<h1>Welcome plain</h1>
<router-outlet></router-outlet>
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for non-standalone apps without routing 1`] = `
"import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
  ],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for non-standalone apps without routing 2`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  standalone: false,
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {}
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for non-standalone apps without routing 3`] = `
"import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [],
      declarations: [AppComponent]
    }).compileComponents();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain(
      'Welcome plain'
    );
  });
});
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for non-standalone apps without routing 4`] = `
"<h1>Welcome plain</h1>
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for standalone apps with routing 1`] = `
"import { Component } from '@angular/core';
import { RouterModule } from '@angular/router';

@Component({
  imports: [RouterModule],
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {}
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for standalone apps with routing 2`] = `
"import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';
import { RouterModule } from '@angular/router';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent, RouterModule.forRoot([])],
    }).compileComponents();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain(
      'Welcome plain'
    );
  });
});
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for standalone apps with routing 3`] = `
"<h1>Welcome plain</h1>
<router-outlet></router-outlet>
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for standalone apps without routing 1`] = `
"import { Component } from '@angular/core';

@Component({
  imports: [],
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {}
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for standalone apps without routing 2`] = `
"import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain(
      'Welcome plain'
    );
  });
});
"
`;

exports[`app --minimal should skip "nx-welcome.component.ts" file and references for standalone apps without routing 3`] = `
"<h1>Welcome plain</h1>
"
`;

exports[`app --standalone should generate a standalone app correctly with routing 1`] = `
"import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig).catch((err) =>
  console.error(err)
);
"
`;

exports[`app --standalone should generate a standalone app correctly with routing 2`] = `
"import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { appRoutes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(appRoutes) ]
};
"
`;

exports[`app --standalone should generate a standalone app correctly with routing 3`] = `
"import { Route } from '@angular/router';

export const appRoutes: Route[] = [];
"
`;

exports[`app --standalone should generate a standalone app correctly with routing 4`] = `
"import { Component } from '@angular/core';
import { RouterModule } from '@angular/router';
import { NxWelcomeComponent } from './nx-welcome.component';

@Component({
  imports: [NxWelcomeComponent, RouterModule],
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {
  title = 'standalone';
}
"
`;

exports[`app --standalone should generate a standalone app correctly with routing 5`] = `
"import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';
import { NxWelcomeComponent } from './nx-welcome.component';
import { RouterModule } from '@angular/router';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent, NxWelcomeComponent, RouterModule.forRoot([])],
    }).compileComponents();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain(
      'Welcome standalone'
    );
  });

  it(\`should have as title 'standalone'\`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('standalone');
  });
});
"
`;

exports[`app --standalone should generate a standalone app correctly without routing 1`] = `
"import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig).catch((err) =>
  console.error(err)
);
"
`;

exports[`app --standalone should generate a standalone app correctly without routing 2`] = `
"import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';

export const appConfig: ApplicationConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true }), ]
};
"
`;

exports[`app --standalone should generate a standalone app correctly without routing 3`] = `
"import { Component } from '@angular/core';
import { NxWelcomeComponent } from './nx-welcome.component';

@Component({
  imports: [NxWelcomeComponent, ],
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {
  title = 'standalone';
}
"
`;

exports[`app --standalone should generate a standalone app correctly without routing 4`] = `
"import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';
import { NxWelcomeComponent } from './nx-welcome.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent, NxWelcomeComponent],
    }).compileComponents();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain(
      'Welcome standalone'
    );
  });

  it(\`should have as title 'standalone'\`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('standalone');
  });
});
"
`;

exports[`app --standalone should should not use event coalescing in versions lower than v18 1`] = `
"import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { appRoutes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [provideRouter(appRoutes) ]
};
"
`;

exports[`app --strict should enable strict type checking: app tsconfig.json 1`] = `
{
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true,
  },
  "compilerOptions": {
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noPropertyAccessFromIndexSignature": true,
    "strict": true,
    "target": "es2022",
  },
  "extends": "../tsconfig.base.json",
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.editor.json",
    },
    {
      "path": "./tsconfig.app.json",
    },
    {
      "path": "./tsconfig.spec.json",
    },
  ],
}
`;

exports[`app --strict should enable strict type checking: e2e tsconfig.json 1`] = `
{
  "compilerOptions": {
    "allowJs": true,
    "forceConsistentCasingInFileNames": true,
    "module": "commonjs",
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noPropertyAccessFromIndexSignature": true,
    "outDir": "../dist/out-tsc",
    "sourceMap": false,
    "strict": true,
    "types": [
      "cypress",
      "node",
    ],
  },
  "extends": "../tsconfig.base.json",
  "include": [
    "**/*.ts",
    "**/*.js",
    "cypress.config.ts",
    "**/*.cy.ts",
    "**/*.cy.js",
    "**/*.d.ts",
  ],
}
`;

exports[`app --unit-test-runner vitest should add tsconfig.spec.json 1`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "types": [
      "vitest/globals",
      "vitest/importMeta",
      "vite/client",
      "node",
      "vitest"
    ]
  },
  "include": [
    "vite.config.ts",
    "vite.config.mts",
    "vitest.config.ts",
    "vitest.config.mts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
    "src/**/*.test.tsx",
    "src/**/*.spec.tsx",
    "src/**/*.test.js",
    "src/**/*.spec.js",
    "src/**/*.test.jsx",
    "src/**/*.spec.jsx",
    "src/**/*.d.ts"
  ],
  "files": ["src/test-setup.ts"]
}
"
`;

exports[`app --unit-test-runner vitest should generate src/test-setup.ts 1`] = `
"import '@analogjs/vitest-angular/setup-zone';

import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting,
} from '@angular/platform-browser-dynamic/testing';
import { getTestBed } from '@angular/core/testing';

getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
"
`;

exports[`app --unit-test-runner vitest should generate vite.config.mts 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import angular from '@analogjs/vite-plugin-angular';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { nxCopyAssetsPlugin } from '@nx/vite/plugins/nx-copy-assets.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/my-app',
  plugins: [angular(), nxViteTsPaths(), nxCopyAssetsPlugin(['*.md'])],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  test: {
    watch: false,
    globals: true,
    environment: 'jsdom',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
    setupFiles: ['src/test-setup.ts'],
    reporters: ['default'],
    coverage: {
      reportsDirectory: '../coverage/my-app',
      provider: 'v8',
    },
  },
});
"
`;

exports[`app angular compat support should import "ApplicationConfig" from "@angular/platform-browser" 1`] = `
"import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { appRoutes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [provideRouter(appRoutes) ]
};
"
`;

exports[`app at the root should accept numbers in the path 1`] = `"src/9-websites/my-app"`;

exports[`app format files should format files 1`] = `
"import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';
import { AppComponent } from './app.component';
import { appRoutes } from './app.routes';
import { NxWelcomeComponent } from './nx-welcome.component';

@NgModule({
  declarations: [AppComponent, NxWelcomeComponent],
  imports: [BrowserModule, RouterModule.forRoot(appRoutes)],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
"
`;

exports[`app format files should format files 2`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  standalone: false,
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {
  title = 'my-app';
}
"
`;

exports[`app format files should format files 3`] = `
"import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';
import { NxWelcomeComponent } from './nx-welcome.component';
import { RouterModule } from '@angular/router';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RouterModule.forRoot([])],
      declarations: [AppComponent, NxWelcomeComponent],
    }).compileComponents();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain(
      'Welcome my-app'
    );
  });

  it(\`should have as title 'my-app'\`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('my-app');
  });
});
"
`;

exports[`app format files should format files 4`] = `
"import { Route } from '@angular/router';

export const appRoutes: Route[] = [];
"
`;

exports[`app nested should create project configs 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "my-app",
  "prefix": "app",
  "projectType": "application",
  "root": "my-dir/my-app",
  "sourceRoot": "my-dir/my-app/src",
  "tags": [],
  "targets": {
    "build": {
      "configurations": {
        "development": {
          "extractLicenses": false,
          "optimization": false,
          "sourceMap": true,
        },
        "production": {
          "budgets": [
            {
              "maximumError": "1mb",
              "maximumWarning": "500kb",
              "type": "initial",
            },
            {
              "maximumError": "8kb",
              "maximumWarning": "4kb",
              "type": "anyComponentStyle",
            },
          ],
          "outputHashing": "all",
        },
      },
      "defaultConfiguration": "production",
      "executor": "@angular-devkit/build-angular:application",
      "options": {
        "assets": [
          {
            "glob": "**/*",
            "input": "my-dir/my-app/public",
          },
        ],
        "browser": "my-dir/my-app/src/main.ts",
        "index": "my-dir/my-app/src/index.html",
        "outputPath": "dist/my-dir/my-app",
        "polyfills": [
          "zone.js",
        ],
        "scripts": [],
        "styles": [
          "my-dir/my-app/src/styles.css",
        ],
        "tsConfig": "my-dir/my-app/tsconfig.app.json",
      },
      "outputs": [
        "{options.outputPath}",
      ],
    },
    "extract-i18n": {
      "executor": "@angular-devkit/build-angular:extract-i18n",
      "options": {
        "buildTarget": "my-app:build",
      },
    },
    "lint": {
      "executor": "@nx/eslint:lint",
    },
    "serve": {
      "configurations": {
        "development": {
          "buildTarget": "my-app:build:development",
        },
        "production": {
          "buildTarget": "my-app:build:production",
        },
      },
      "defaultConfiguration": "development",
      "executor": "@angular-devkit/build-angular:dev-server",
    },
    "serve-static": {
      "executor": "@nx/web:file-server",
      "options": {
        "buildTarget": "my-app:build",
        "port": 4200,
        "spa": true,
        "staticFilePath": "dist/my-dir/my-app/browser",
      },
    },
    "test": {
      "executor": "@nx/jest:jest",
      "options": {
        "jestConfig": "my-dir/my-app/jest.config.ts",
      },
      "outputs": [
        "{workspaceRoot}/coverage/{projectRoot}",
      ],
    },
  },
}
`;

exports[`app nested should create project configs 2`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "implicitDependencies": [
    "my-app",
  ],
  "name": "my-app-e2e",
  "projectType": "application",
  "root": "my-dir/my-app-e2e",
  "sourceRoot": "my-dir/my-app-e2e/src",
  "tags": [],
  "targets": {},
}
`;

exports[`app not nested should create project configs 1`] = `
{
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "name": "my-app",
  "prefix": "app",
  "projectType": "application",
  "root": "my-app",
  "sourceRoot": "my-app/src",
  "tags": [],
  "targets": {
    "build": {
      "configurations": {
        "development": {
          "extractLicenses": false,
          "optimization": false,
          "sourceMap": true,
        },
        "production": {
          "budgets": [
            {
              "maximumError": "1mb",
              "maximumWarning": "500kb",
              "type": "initial",
            },
            {
              "maximumError": "8kb",
              "maximumWarning": "4kb",
              "type": "anyComponentStyle",
            },
          ],
          "outputHashing": "all",
        },
      },
      "defaultConfiguration": "production",
      "executor": "@angular-devkit/build-angular:application",
      "options": {
        "assets": [
          {
            "glob": "**/*",
            "input": "my-app/public",
          },
        ],
        "browser": "my-app/src/main.ts",
        "index": "my-app/src/index.html",
        "outputPath": "dist/my-app",
        "polyfills": [
          "zone.js",
        ],
        "scripts": [],
        "styles": [
          "my-app/src/styles.css",
        ],
        "tsConfig": "my-app/tsconfig.app.json",
      },
      "outputs": [
        "{options.outputPath}",
      ],
    },
    "extract-i18n": {
      "executor": "@angular-devkit/build-angular:extract-i18n",
      "options": {
        "buildTarget": "my-app:build",
      },
    },
    "lint": {
      "executor": "@nx/eslint:lint",
    },
    "serve": {
      "configurations": {
        "development": {
          "buildTarget": "my-app:build:development",
        },
        "production": {
          "buildTarget": "my-app:build:production",
        },
      },
      "defaultConfiguration": "development",
      "executor": "@angular-devkit/build-angular:dev-server",
    },
    "serve-static": {
      "executor": "@nx/web:file-server",
      "options": {
        "buildTarget": "my-app:build",
        "port": 4200,
        "spa": true,
        "staticFilePath": "dist/my-app/browser",
      },
    },
    "test": {
      "executor": "@nx/jest:jest",
      "options": {
        "jestConfig": "my-app/jest.config.ts",
      },
      "outputs": [
        "{workspaceRoot}/coverage/{projectRoot}",
      ],
    },
  },
}
`;

exports[`app not nested should create project configs 2`] = `
{
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "implicitDependencies": [
    "my-app",
  ],
  "name": "my-app-e2e",
  "projectType": "application",
  "root": "my-app-e2e",
  "sourceRoot": "my-app-e2e/src",
  "tags": [],
  "targets": {},
}
`;

exports[`app not nested should generate files: e2e tsconfig.json 1`] = `
{
  "compilerOptions": {
    "allowJs": true,
    "forceConsistentCasingInFileNames": true,
    "module": "commonjs",
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noPropertyAccessFromIndexSignature": true,
    "outDir": "../dist/out-tsc",
    "sourceMap": false,
    "strict": true,
    "types": [
      "cypress",
      "node",
    ],
  },
  "extends": "../tsconfig.base.json",
  "include": [
    "**/*.ts",
    "**/*.js",
    "cypress.config.ts",
    "**/*.cy.ts",
    "**/*.cy.js",
    "**/*.d.ts",
  ],
}
`;

exports[`app not nested should generate files: tsconfig.app.json 1`] = `
{
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "types": [],
  },
  "exclude": [
    "jest.config.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
  ],
  "extends": "./tsconfig.json",
  "files": [
    "src/main.ts",
  ],
  "include": [
    "src/**/*.d.ts",
  ],
}
`;

exports[`app not nested should generate files: tsconfig.json 1`] = `
{
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true,
  },
  "compilerOptions": {
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noPropertyAccessFromIndexSignature": true,
    "strict": true,
    "target": "es2022",
  },
  "extends": "../tsconfig.base.json",
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.editor.json",
    },
    {
      "path": "./tsconfig.app.json",
    },
    {
      "path": "./tsconfig.spec.json",
    },
  ],
}
`;

exports[`app should generate correct tsconfig.editor.json 1`] = `
{
  "compilerOptions": {},
  "exclude": [
    "jest.config.ts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
  ],
  "extends": "./tsconfig.json",
  "include": [
    "src/**/*.ts",
  ],
}
`;
