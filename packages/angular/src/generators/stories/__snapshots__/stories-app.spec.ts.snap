// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`angularStories generator: applications should generate stories file for inline scam component 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { MyScamComponent } from './my-scam.component';
import { within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

const meta: Meta<MyScamComponent> = {
  component: MyScamComponent,
  title: 'MyScamComponent',
};
export default meta;
type Story = StoryObj<MyScamComponent>;

export const Primary: Story = {
  args: {
  },
};

export const Heading: Story = {
  args: {
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    expect(canvas.getByText(/my-scam works!/gi)).toBeTruthy();
  },
};
"
`;

exports[`angularStories generator: applications should generate stories file with interaction tests 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { AppComponent } from './app.component';
import { within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

const meta: Meta<AppComponent> = {
  component: AppComponent,
  title: 'AppComponent',
};
export default meta;
type Story = StoryObj<AppComponent>;

export const Primary: Story = {
  args: {},
};

export const Heading: Story = {
  args: {},
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    expect(canvas.getByText(/app works!/gi)).toBeTruthy();
  },
};
"
`;

exports[`angularStories generator: applications should ignore a path that has a nested component, but still generate nested component stories 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { ComponentBComponent } from './component-b.component';
import { within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

const meta: Meta<ComponentBComponent> = {
  component: ComponentBComponent,
  title: 'ComponentBComponent',
};
export default meta;
type Story = StoryObj<ComponentBComponent>;

export const Primary: Story = {
  args: {
  },
};

export const Heading: Story = {
  args: {
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    expect(canvas.getByText(/component-b works!/gi)).toBeTruthy();
  },
};
"
`;

exports[`angularStories generator: applications should ignore a path when using a routing module 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { ComponentComponent } from './component.component';
import { within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

const meta: Meta<ComponentComponent> = {
  component: ComponentComponent,
  title: 'ComponentComponent',
};
export default meta;
type Story = StoryObj<ComponentComponent>;

export const Primary: Story = {
  args: {
  },
};

export const Heading: Story = {
  args: {
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    expect(canvas.getByText(/component works!/gi)).toBeTruthy();
  },
};
"
`;
