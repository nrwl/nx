// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`angularStories generator: applications should generate stories file for inline scam component 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { MyScam } from './my-scam';
import { expect } from 'storybook/test';

const meta: Meta<MyScam> = {
  component: MyScam,
  title: 'MyScam',
};
export default meta;
type Story = StoryObj<MyScam>;

export const Primary: Story = {
  args: {
  },
};

export const Heading: Story = {
  args: {
  },
  play: async ({ canvas }) => {
    await expect(canvas.getByText(/my-scam works!/gi)).toBeTruthy();
  },
};
"
`;

exports[`angularStories generator: applications should generate stories file with interaction tests 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { App } from './app';
import { expect } from 'storybook/test';

const meta: Meta<App> = {
  component: App,
  title: 'App',
};
export default meta;
type Story = StoryObj<App>;

export const Primary: Story = {
  args: {},
};

export const Heading: Story = {
  args: {},
  play: async ({ canvas }) => {
    await expect(canvas.getByText(/app works!/gi)).toBeTruthy();
  },
};
"
`;

exports[`angularStories generator: applications should ignore a path that has a nested component, but still generate nested component stories 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { ComponentB } from './component-b';
import { expect } from 'storybook/test';

const meta: Meta<ComponentB> = {
  component: ComponentB,
  title: 'ComponentB',
};
export default meta;
type Story = StoryObj<ComponentB>;

export const Primary: Story = {
  args: {
  },
};

export const Heading: Story = {
  args: {
  },
  play: async ({ canvas }) => {
    await expect(canvas.getByText(/component-b works!/gi)).toBeTruthy();
  },
};
"
`;

exports[`angularStories generator: applications should ignore a path when using a routing module 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { Component } from './component';
import { expect } from 'storybook/test';

const meta: Meta<Component> = {
  component: Component,
  title: 'Component',
};
export default meta;
type Story = StoryObj<Component>;

export const Primary: Story = {
  args: {
  },
};

export const Heading: Story = {
  args: {
  },
  play: async ({ canvas }) => {
    await expect(canvas.getByText(/component works!/gi)).toBeTruthy();
  },
};
"
`;
