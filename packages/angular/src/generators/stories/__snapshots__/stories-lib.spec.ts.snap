// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`angularStories generator: libraries Stories for non-empty Angular library should generate stories file for standalone components 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { Standalone } from './standalone';
import { within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

const meta: Meta<Standalone> = {
  component: Standalone,
  title: 'Standalone',
};
export default meta;
type Story = StoryObj<Standalone>;

export const Primary: Story = {
  args: {},
};

export const Heading: Story = {
  args: {},
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    expect(canvas.getByText(/standalone works!/gi)).toBeTruthy();
  },
};
"
`;

exports[`angularStories generator: libraries Stories for non-empty Angular library should generate stories file for standalone components 2`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { SecondaryStandalone } from './secondary-standalone';
import { within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

const meta: Meta<SecondaryStandalone> = {
  component: SecondaryStandalone,
  title: 'SecondaryStandalone',
};
export default meta;
type Story = StoryObj<SecondaryStandalone>;

export const Primary: Story = {
  args: {},
};

export const Heading: Story = {
  args: {},
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    expect(canvas.getByText(/secondary-standalone works!/gi)).toBeTruthy();
  },
};
"
`;

exports[`angularStories generator: libraries Stories for non-empty Angular library should generate stories.ts files 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { TestButton } from './test-button';
import { within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

const meta: Meta<TestButton> = {
  component: TestButton,
  title: 'TestButton',
};
export default meta;
type Story = StoryObj<TestButton>;

export const Primary: Story = {
  args: {
    buttonType: 'button',
    style: 'default',
    age: 0,
    isOn: false,
  },
};

export const Heading: Story = {
  args: {
    buttonType: 'button',
    style: 'default',
    age: 0,
    isOn: false,
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    expect(canvas.getByText(/test-button works!/gi)).toBeTruthy();
  },
};
"
`;

exports[`angularStories generator: libraries Stories for non-empty Angular library should ignore paths 1`] = `
"import type { Meta, StoryObj } from '@storybook/angular';
import { TestButton } from './test-button';
import { within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

const meta: Meta<TestButton> = {
  component: TestButton,
  title: 'TestButton',
};
export default meta;
type Story = StoryObj<TestButton>;

export const Primary: Story = {
  args: {
    buttonType: 'button',
    style: 'default',
    age: 0,
    isOn: false,
  },
};

export const Heading: Story = {
  args: {
    buttonType: 'button',
    style: 'default',
    age: 0,
    isOn: false,
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    expect(canvas.getByText(/test-button works!/gi)).toBeTruthy();
  },
};
"
`;
