// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MF Remote App Generator --ssr should generate the correct files 1`] = `
"import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    RouterModule.forRoot(
      [
        {
          path: '',
          loadChildren: () =>
            import('./remote-entry/entry.module').then(
              (m) => m.RemoteEntryModule
            ),
        },
      ],
      { initialNavigation: 'enabledBlocking' }
    ),
  ],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 2`] = `
"import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic()
  .bootstrapModule(AppModule, {
    ngZoneEventCoalescing: true,
  })
  .catch((err) => console.error(err));
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 3`] = `
"export { AppServerModule as default } from './app/app.server.module';
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 4`] = `
"import 'zone.js/node';

import { APP_BASE_HREF } from '@angular/common';
import { CommonEngine } from '@angular/ssr/node';
import * as express from 'express';
import * as cors from 'cors';
import { existsSync } from 'node:fs';
import { join } from 'node:path';
import { AppServerModule } from './bootstrap.server';

// The Express app is exported so that it can be used by serverless Functions.
export function app(): express.Express {
  const server = express();
  const browserBundles = join(process.cwd(), 'dist/test/browser');
  const serverBundles = join(process.cwd(), 'dist/test/server');
  const indexHtml = existsSync(join(browserBundles, 'index.original.html'))
    ? join(browserBundles, 'index.original.html')
    : join(browserBundles, 'index.html');

  server.use(cors());

  const commonEngine = new CommonEngine();

  server.set('view engine', 'html');
  server.set('views', browserBundles);

  // Example Express Rest API endpoints
  // server.get('/api/**', (req, res) => { });
  // Serve static files from /browser
  server.get('*.*', express.static(browserBundles, { maxAge: '1y' }));
  // Serve static files from /server
  server.use('/server', express.static(serverBundles, { maxAge: '1y' }));

  // All regular routes use the Angular engine
  server.get('*', (req, res, next) => {
    const { protocol, originalUrl, baseUrl, headers } = req;

    commonEngine
      .render({
        bootstrap: AppServerModule,
        documentFilePath: indexHtml,
        url: \`\${protocol}://\${headers.host}\${originalUrl}\`,
        publicPath: browserBundles,
        providers: [{ provide: APP_BASE_HREF, useValue: baseUrl }],
      })
      .then((html) => res.send(html))
      .catch((err) => next(err));
  });

  return server;
}

function run(): void {
  const port = process.env['PORT'] || 4000;

  // Start up the Node server
  const server = app();
  server.listen(port, () => {
    console.log(\`Node Express server listening on http://localhost:\${port}\`);

    /**
     * DO NOT REMOVE IF USING @nx/angular:module-federation-dev-ssr executor
     * to serve your Host application with this Remote application.
     * This message allows Nx to determine when the Remote is ready to be
     * consumed by the Host.
     */
    process.send && process.send('nx.server.ready');
  });
}

run();

export default AppServerModule;
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 5`] = `
"import('./src/main.server');
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 6`] = `
"/**
 * Nx requires a default export of the config to allow correct resolution of the module federation graph.
 **/
module.exports = {
  name: 'test',
  exposes: {
    './Module': 'test/src/app/remote-entry/entry.module.ts',
  },
};
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 7`] = `
"const { withModuleFederationForSSR } = require('@nx/module-federation/angular');
const config = require('./module-federation.config');

/**
 * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation
 * The DTS Plugin can be enabled by setting dts: true
 * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html
 */
module.exports = withModuleFederationForSSR(config, { dts: false });
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 8`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'app-test-entry',
  standalone: false,
  template: \`<app-nx-welcome></app-nx-welcome>\`,
})
export class RemoteEntryComponent {}
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 9`] = `
"import { Route } from '@angular/router';

export const appRoutes: Route[] = [
  {
    path: '',
    loadChildren: () =>
      import('./remote-entry/entry.module').then((m) => m.RemoteEntryModule),
  },
];
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 10`] = `
"import { Route } from '@angular/router';
import { RemoteEntryComponent } from './entry.component';

export const remoteRoutes: Route[] = [
  { path: '', component: RemoteEntryComponent },
];
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 11`] = `
{
  "configurations": {
    "development": {
      "buildOptimizer": false,
      "extractLicenses": false,
      "optimization": false,
      "sourceMap": true,
    },
    "production": {
      "outputHashing": "media",
    },
  },
  "defaultConfiguration": "production",
  "dependsOn": [
    "build",
  ],
  "executor": "@nx/angular:webpack-server",
  "options": {
    "customWebpackConfig": {
      "path": "test/webpack.server.config.js",
    },
    "main": "test/src/server.ts",
    "outputPath": "dist/test/server",
    "tsConfig": "test/tsconfig.server.json",
  },
}
`;

exports[`MF Remote App Generator --ssr should generate the correct files 12`] = `
"import { Route } from '@angular/router';
import { RemoteEntryComponent } from './entry.component';

export const remoteRoutes: Route[] = [
  { path: '', component: RemoteEntryComponent },
];
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files 13`] = `
{
  "dependsOn": [
    "build",
    "server",
  ],
  "executor": "nx:run-commands",
  "options": {
    "command": "PORT=4201 node dist/test/server/main.js",
  },
}
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 1`] = `
"import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    RouterModule.forRoot([{
      path: '',
      loadChildren: () => import('./remote-entry/entry.module').then(m => m.RemoteEntryModule)
    }], { initialNavigation: 'enabledBlocking' }),
  ],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}"
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 2`] = `
"import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic()
  .bootstrapModule(AppModule, {
    ngZoneEventCoalescing: true,
  })
  .catch((err) => console.error(err));
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 3`] = `
"export { AppServerModule as default } from './app/app.server.module';
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 4`] = `
"import 'zone.js/node';

import { APP_BASE_HREF } from '@angular/common';
import { CommonEngine } from '@angular/ssr/node';
import * as express from 'express';
import * as cors from 'cors';
import { existsSync } from 'node:fs';
import { join } from 'node:path';
import { AppServerModule } from './bootstrap.server';

// The Express app is exported so that it can be used by serverless Functions.
export function app(): express.Express {
  const server = express();
  const browserBundles = join(process.cwd(), 'dist/test/browser');
  const serverBundles = join(process.cwd(), 'dist/test/server');
  const indexHtml = existsSync(join(browserBundles, 'index.original.html'))
    ? join(browserBundles, 'index.original.html')
    : join(browserBundles, 'index.html');

  server.use(cors());

  const commonEngine = new CommonEngine();

  server.set('view engine', 'html');
  server.set('views', browserBundles);

  // Example Express Rest API endpoints
  // server.get('/api/**', (req, res) => { });
  // Serve static files from /browser
  server.get('*.*', express.static(browserBundles, { maxAge: '1y' }));
  // Serve static files from /server
  server.use('/server', express.static(serverBundles, { maxAge: '1y' }));

  // All regular routes use the Angular engine
  server.get('*', (req, res, next) => {
    const { protocol, originalUrl, baseUrl, headers } = req;

    commonEngine
      .render({
        bootstrap: AppServerModule,
        documentFilePath: indexHtml,
        url: \`\${protocol}://\${headers.host}\${originalUrl}\`,
        publicPath: browserBundles,
        providers: [{ provide: APP_BASE_HREF, useValue: baseUrl }],
      })
      .then((html) => res.send(html))
      .catch((err) => next(err));
  });

  return server;
}

function run(): void {
  const port = process.env['PORT'] || 4000;

  // Start up the Node server
  const server = app();
  server.listen(port, () => {
    console.log(\`Node Express server listening on http://localhost:\${port}\`);

    /**
     * DO NOT REMOVE IF USING @nx/angular:module-federation-dev-ssr executor
     * to serve your Host application with this Remote application.
     * This message allows Nx to determine when the Remote is ready to be
     * consumed by the Host.
     */
    process.send && process.send('nx.server.ready');
  });
}

run();

export default AppServerModule;
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 5`] = `"import('./src/main.server');"`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 6`] = `
"import { ModuleFederationConfig } from '@nx/module-federation';

const config: ModuleFederationConfig = {
  name: 'test',
  exposes: {
    './Module': 'test/src/app/remote-entry/entry.module.ts',
  },
};

/**
* Nx requires a default export of the config to allow correct resolution of the module federation graph.
**/
export default config;
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 7`] = `
"import { withModuleFederationForSSR } from '@nx/module-federation/angular';
import config from './module-federation.config';

/**
 * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation
 * The DTS Plugin can be enabled by setting dts: true
 * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html
 */
export default withModuleFederationForSSR(config, { dts: false });
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 8`] = `
"import { Component } from '@angular/core';

@Component({
  selector: 'app-test-entry',
  standalone: false,
  template: \`<app-nx-welcome></app-nx-welcome>\`
})
export class RemoteEntryComponent {}
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 9`] = `
"import { Route } from '@angular/router';

export const appRoutes: Route[] = [
    { path: '', loadChildren: () => import('./remote-entry/entry.module').then(m => m.RemoteEntryModule) },];
"
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 10`] = `
"import { Route } from '@angular/router';
import { RemoteEntryComponent } from './entry.component';

export const remoteRoutes: Route[] = [{ path: '', component: RemoteEntryComponent }];"
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 11`] = `
{
  "configurations": {
    "development": {
      "buildOptimizer": false,
      "extractLicenses": false,
      "optimization": false,
      "sourceMap": true,
    },
    "production": {
      "outputHashing": "media",
    },
  },
  "defaultConfiguration": "production",
  "dependsOn": [
    "build",
  ],
  "executor": "@nx/angular:webpack-server",
  "options": {
    "customWebpackConfig": {
      "path": "test/webpack.server.config.ts",
    },
    "main": "test/src/server.ts",
    "outputPath": "dist/test/server",
    "tsConfig": "test/tsconfig.server.json",
  },
}
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 12`] = `
"import { Route } from '@angular/router';
import { RemoteEntryComponent } from './entry.component';

export const remoteRoutes: Route[] = [{ path: '', component: RemoteEntryComponent }];"
`;

exports[`MF Remote App Generator --ssr should generate the correct files when --typescriptConfiguration=true 13`] = `
{
  "dependsOn": [
    "build",
    "server",
  ],
  "executor": "nx:run-commands",
  "options": {
    "command": "PORT=4201 node dist/test/server/main.js",
  },
}
`;

exports[`MF Remote App Generator should generate a remote mf app with a host 1`] = `
"const { withModuleFederation } = require('@nx/module-federation/angular');
const config = require('./module-federation.config');

/**
 * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation
 * The DTS Plugin can be enabled by setting dts: true
 * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html
 */
module.exports = withModuleFederation(config, { dts: false });
"
`;

exports[`MF Remote App Generator should generate a remote mf app with a host 2`] = `
"const { withModuleFederation } = require('@nx/module-federation/angular');
const config = require('./module-federation.config');

/**
 * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation
 * The DTS Plugin can be enabled by setting dts: true
 * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html
 */
module.exports = withModuleFederation(config, { dts: false });
"
`;

exports[`MF Remote App Generator should generate a remote mf app with a host when --typescriptConfiguration=true 1`] = `
"import { withModuleFederation } from '@nx/module-federation/angular';
import config from './module-federation.config';

/**
 * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation
 * The DTS Plugin can be enabled by setting dts: true
 * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html
 */
export default withModuleFederation(config, { dts: false });
"
`;

exports[`MF Remote App Generator should generate a remote mf app with a host when --typescriptConfiguration=true 2`] = `
"import { withModuleFederation } from '@nx/module-federation/angular';
import config from './module-federation.config';

/**
 * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation
 * The DTS Plugin can be enabled by setting dts: true
 * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html
 */
export default withModuleFederation(config, { dts: false });
"
`;

exports[`MF Remote App Generator should generate a remote mf app with no host 1`] = `
"const { withModuleFederation } = require('@nx/module-federation/angular');
const config = require('./module-federation.config');

/**
 * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation
 * The DTS Plugin can be enabled by setting dts: true
 * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html
 */
module.exports = withModuleFederation(config, { dts: false });
"
`;

exports[`MF Remote App Generator should generate a remote mf app with no host when --typescriptConfiguration=true 1`] = `
"import { withModuleFederation } from '@nx/module-federation/angular';
import config from './module-federation.config';

/**
 * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation
 * The DTS Plugin can be enabled by setting dts: true
 * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html
 */
export default withModuleFederation(config, { dts: false });
"
`;

exports[`MF Remote App Generator should generate the a remote setup for standalone components 1`] = `
"import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { RemoteEntryComponent } from './app/remote-entry/entry.component';

bootstrapApplication(RemoteEntryComponent, appConfig).catch((err) =>
  console.error(err)
);
"
`;

exports[`MF Remote App Generator should generate the a remote setup for standalone components 2`] = `
"/**
 * Nx requires a default export of the config to allow correct resolution of the module federation graph.
 **/
module.exports = {
  name: 'test',
  exposes: {
    './Routes': 'test/src/app/remote-entry/entry.routes.ts',
  },
};
"
`;

exports[`MF Remote App Generator should generate the a remote setup for standalone components 3`] = `
"import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NxWelcomeComponent } from './nx-welcome.component';

@Component({
  imports: [CommonModule, NxWelcomeComponent],
  selector: 'app-test-entry',
  template: \`<app-nx-welcome></app-nx-welcome>\`,
})
export class RemoteEntryComponent {}
"
`;

exports[`MF Remote App Generator should generate the a remote setup for standalone components 4`] = `
"import { Route } from '@angular/router';

export const appRoutes: Route[] = [
  {
    path: '',
    loadChildren: () =>
      import('./remote-entry/entry.routes').then((m) => m.remoteRoutes),
  },
];
"
`;

exports[`MF Remote App Generator should generate the a remote setup for standalone components 5`] = `
"import { Route } from '@angular/router';
import { RemoteEntryComponent } from './entry.component';

export const remoteRoutes: Route[] = [
  { path: '', component: RemoteEntryComponent },
];
"
`;

exports[`MF Remote App Generator should generate the a remote setup for standalone components when --typescriptConfiguration=true 1`] = `
"import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { RemoteEntryComponent } from './app/remote-entry/entry.component';

bootstrapApplication(RemoteEntryComponent, appConfig).catch((err) =>
  console.error(err)
);
"
`;

exports[`MF Remote App Generator should generate the a remote setup for standalone components when --typescriptConfiguration=true 2`] = `
"import { ModuleFederationConfig } from '@nx/module-federation';

const config: ModuleFederationConfig = {
  name: 'test',
  exposes: {
    './Routes': 'test/src/app/remote-entry/entry.routes.ts',
  },
};

/**
* Nx requires a default export of the config to allow correct resolution of the module federation graph.
**/
export default config;
"
`;

exports[`MF Remote App Generator should generate the a remote setup for standalone components when --typescriptConfiguration=true 3`] = `
"import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NxWelcomeComponent } from './nx-welcome.component';

@Component({
  imports: [CommonModule, NxWelcomeComponent],
  selector: 'app-test-entry',
  template: \`<app-nx-welcome></app-nx-welcome>\`
})
export class RemoteEntryComponent {}
"
`;

exports[`MF Remote App Generator should generate the a remote setup for standalone components when --typescriptConfiguration=true 4`] = `
"import { Route } from '@angular/router';

export const appRoutes: Route[] = [
    {path: '', loadChildren: () => import('./remote-entry/entry.routes').then(m => m.remoteRoutes)},];
"
`;

exports[`MF Remote App Generator should generate the a remote setup for standalone components when --typescriptConfiguration=true 5`] = `
"import { Route } from '@angular/router';
import { RemoteEntryComponent } from './entry.component';

export const remoteRoutes: Route[] = [{ path: '', component: RemoteEntryComponent }];"
`;
