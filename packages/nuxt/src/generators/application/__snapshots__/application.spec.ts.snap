// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`app generated files content - as-provided - my-app general application should add nuxt entries in .gitignore 1`] = `
"# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
vite.config.*.timestamp*"
`;

exports[`app generated files content - as-provided - my-app general application should add the nuxt and vitest plugins 1`] = `
{
  "dependsOn": [
    "^build-static",
  ],
}
`;

exports[`app generated files content - as-provided - my-app general application should configure eslint correctly (eslintrc) 1`] = `
"{
  "extends": ["@nuxt/eslint-config", "../.eslintrc.json"],
  "ignorePatterns": ["!**/*", ".nuxt/**", ".output/**", "node_modules"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx", "*.vue"],
      "rules": {}
    }
  ]
}
"
`;

exports[`app generated files content - as-provided - my-app general application should configure eslint correctly (flat config) 1`] = `
"const { FlatCompat } = require('@eslint/eslintrc');
const js = require('@eslint/js');
const baseConfig = require('../eslint.config.cjs');

const compat = new FlatCompat({
  baseDirectory: __dirname,
  recommendedConfig: js.configs.recommended,
});

module.exports = [
  ...baseConfig,
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx', '**/*.vue'],
    // Override or add rules here
    rules: {},
  },
  ...compat.extends('@nuxt/eslint-config'),
  {
    files: ['**/*.vue'],
    languageOptions: {
      parserOptions: {
        parser: require('@typescript-eslint/parser'),
      },
    },
  },
  {
    ignores: ['.nuxt/**', '.output/**', 'node_modules'],
  },
];
"
`;

exports[`app generated files content - as-provided - my-app general application should configure nuxt correctly 1`] = `
"import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { defineNuxtConfig } from 'nuxt/config';

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  workspaceDir: '../',
  srcDir: 'src',
  devtools: { enabled: true },
  devServer: {
    host: 'localhost',
    port: 4200,
  },
  typescript: {
    typeCheck: true,
    tsConfig: {
      extends: '../tsconfig.app.json', // Nuxt copies this string as-is to the \`./.nuxt/tsconfig.json\`, therefore it needs to be relative to that directory
    },
  },
  imports: {
    autoImport: true,
  },
  vite: {
    plugins: [nxViteTsPaths()],
  },
});
"
`;

exports[`app generated files content - as-provided - my-app general application should configure tsconfig and project.json correctly 1`] = `
"{
  "name": "my-app",
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "projectType": "application",
  "sourceRoot": "my-app/src",
  "// targets": "to see all targets run: nx show project my-app --web",
  "targets": {}
}
"
`;

exports[`app generated files content - as-provided - my-app general application should configure tsconfig and project.json correctly 2`] = `
"{
  "files": [],
  "include": [".nuxt/nuxt.d.ts"],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ],
  "extends": "../tsconfig.base.json"
}
"
`;

exports[`app generated files content - as-provided - my-app general application should configure vitest correctly 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { nxCopyAssetsPlugin } from '@nx/vite/plugins/nx-copy-assets.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/my-app',
  plugins: [vue(), nxViteTsPaths(), nxCopyAssetsPlugin(['*.md'])],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  test: {
    watch: false,
    globals: true,
    environment: 'jsdom',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
    reporters: ['default'],
    coverage: {
      reportsDirectory: '../coverage/my-app',
      provider: 'v8',
    },
  },
});
"
`;

exports[`app generated files content - as-provided - my-app general application should configure vitest correctly 2`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "types": [
      "vitest/globals",
      "vitest/importMeta",
      "vite/client",
      "node",
      "vitest"
    ],
    "composite": true
  },
  "include": [
    ".nuxt/nuxt.d.ts",
    "vite.config.ts",
    "vite.config.mts",
    "vitest.config.ts",
    "vitest.config.mts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
    "src/**/*.test.tsx",
    "src/**/*.spec.tsx",
    "src/**/*.test.js",
    "src/**/*.spec.js",
    "src/**/*.test.jsx",
    "src/**/*.spec.jsx",
    "src/**/*.d.ts"
  ]
}
"
`;

exports[`app generated files content - as-provided - my-app general application should configure vitest correctly 3`] = `
"{
  "files": [],
  "include": [".nuxt/nuxt.d.ts"],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ],
  "extends": "../tsconfig.base.json"
}
"
`;

exports[`app generated files content - as-provided - my-app general application should create all new files in the correct location 1`] = `
[
  ".prettierrc",
  "package.json",
  "nx.json",
  "tsconfig.base.json",
  ".prettierignore",
  "my-app/project.json",
  "my-app/.npmrc",
  "my-app/nuxt.config.ts",
  "my-app/src/app.vue",
  "my-app/src/pages/about.vue",
  "my-app/src/pages/index.vue",
  "my-app/src/public/.gitkeep",
  "my-app/src/public/favicon.ico",
  "my-app/src/server/api/greet.ts",
  "my-app/src/server/tsconfig.json",
  "my-app/src/components/NxWelcome.vue",
  "my-app/tsconfig.app.json",
  "my-app/tsconfig.json",
  ".gitignore",
  ".eslintrc.json",
  ".eslintignore",
  "my-app/.eslintrc.json",
  "my-app/tsconfig.spec.json",
  "vitest.workspace.ts",
  "my-app/vitest.config.ts",
  "my-app-e2e/project.json",
  "my-app-e2e/src/example.spec.ts",
  "my-app-e2e/playwright.config.ts",
  "my-app-e2e/tsconfig.json",
  "my-app-e2e/.eslintrc.json",
  ".vscode/extensions.json",
]
`;

exports[`app generated files content - as-provided - my-app styles setup should configure css 1`] = `
"import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { defineNuxtConfig } from 'nuxt/config';

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  workspaceDir: '../',
  srcDir: 'src',
  devtools: { enabled: true },
  devServer: {
    host: 'localhost',
    port: 4200,
  },
  typescript: {
    typeCheck: true,
    tsConfig: {
      extends: '../tsconfig.app.json', // Nuxt copies this string as-is to the \`./.nuxt/tsconfig.json\`, therefore it needs to be relative to that directory
    },
  },
  imports: {
    autoImport: true,
  },
  css: ['~/assets/css/styles.css'],
  vite: {
    plugins: [nxViteTsPaths()],
  },
});
"
`;

exports[`app generated files content - as-provided - my-app styles setup should configure less 1`] = `
"import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { defineNuxtConfig } from 'nuxt/config';

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  workspaceDir: '../',
  srcDir: 'src',
  devtools: { enabled: true },
  devServer: {
    host: 'localhost',
    port: 4200,
  },
  typescript: {
    typeCheck: true,
    tsConfig: {
      extends: '../tsconfig.app.json', // Nuxt copies this string as-is to the \`./.nuxt/tsconfig.json\`, therefore it needs to be relative to that directory
    },
  },
  imports: {
    autoImport: true,
  },
  css: ['~/assets/css/styles.less'],
  vite: {
    plugins: [nxViteTsPaths()],
  },
});
"
`;

exports[`app generated files content - as-provided - my-app styles setup should configure scss 1`] = `
"import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { defineNuxtConfig } from 'nuxt/config';

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  workspaceDir: '../',
  srcDir: 'src',
  devtools: { enabled: true },
  devServer: {
    host: 'localhost',
    port: 4200,
  },
  typescript: {
    typeCheck: true,
    tsConfig: {
      extends: '../tsconfig.app.json', // Nuxt copies this string as-is to the \`./.nuxt/tsconfig.json\`, therefore it needs to be relative to that directory
    },
  },
  imports: {
    autoImport: true,
  },
  css: ['~/assets/css/styles.scss'],
  vite: {
    plugins: [nxViteTsPaths()],
  },
});
"
`;

exports[`app generated files content - as-provided - my-app styles setup should not configure styles 1`] = `
"import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { defineNuxtConfig } from 'nuxt/config';

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  workspaceDir: '../',
  srcDir: 'src',
  devtools: { enabled: true },
  devServer: {
    host: 'localhost',
    port: 4200,
  },
  typescript: {
    typeCheck: true,
    tsConfig: {
      extends: '../tsconfig.app.json', // Nuxt copies this string as-is to the \`./.nuxt/tsconfig.json\`, therefore it needs to be relative to that directory
    },
  },
  imports: {
    autoImport: true,
  },
  vite: {
    plugins: [nxViteTsPaths()],
  },
});
"
`;

exports[`app generated files content - as-provided - myApp general application should add nuxt entries in .gitignore 1`] = `
"# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
vite.config.*.timestamp*"
`;

exports[`app generated files content - as-provided - myApp general application should add the nuxt and vitest plugins 1`] = `
{
  "dependsOn": [
    "^build-static",
  ],
}
`;

exports[`app generated files content - as-provided - myApp general application should configure eslint correctly (eslintrc) 1`] = `
"{
  "extends": ["@nuxt/eslint-config", "../.eslintrc.json"],
  "ignorePatterns": ["!**/*", ".nuxt/**", ".output/**", "node_modules"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx", "*.vue"],
      "rules": {}
    }
  ]
}
"
`;

exports[`app generated files content - as-provided - myApp general application should configure eslint correctly (flat config) 1`] = `
"const { FlatCompat } = require('@eslint/eslintrc');
const js = require('@eslint/js');
const baseConfig = require('../eslint.config.cjs');

const compat = new FlatCompat({
  baseDirectory: __dirname,
  recommendedConfig: js.configs.recommended,
});

module.exports = [
  ...baseConfig,
  {
    files: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx', '**/*.vue'],
    // Override or add rules here
    rules: {},
  },
  ...compat.extends('@nuxt/eslint-config'),
  {
    files: ['**/*.vue'],
    languageOptions: {
      parserOptions: {
        parser: require('@typescript-eslint/parser'),
      },
    },
  },
  {
    ignores: ['.nuxt/**', '.output/**', 'node_modules'],
  },
];
"
`;

exports[`app generated files content - as-provided - myApp general application should configure nuxt correctly 1`] = `
"import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { defineNuxtConfig } from 'nuxt/config';

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  workspaceDir: '../',
  srcDir: 'src',
  devtools: { enabled: true },
  devServer: {
    host: 'localhost',
    port: 4200,
  },
  typescript: {
    typeCheck: true,
    tsConfig: {
      extends: '../tsconfig.app.json', // Nuxt copies this string as-is to the \`./.nuxt/tsconfig.json\`, therefore it needs to be relative to that directory
    },
  },
  imports: {
    autoImport: true,
  },
  vite: {
    plugins: [nxViteTsPaths()],
  },
});
"
`;

exports[`app generated files content - as-provided - myApp general application should configure tsconfig and project.json correctly 1`] = `
"{
  "name": "myApp",
  "$schema": "../node_modules/nx/schemas/project-schema.json",
  "projectType": "application",
  "sourceRoot": "myApp/src",
  "// targets": "to see all targets run: nx show project myApp --web",
  "targets": {}
}
"
`;

exports[`app generated files content - as-provided - myApp general application should configure tsconfig and project.json correctly 2`] = `
"{
  "files": [],
  "include": [".nuxt/nuxt.d.ts"],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ],
  "extends": "../tsconfig.base.json"
}
"
`;

exports[`app generated files content - as-provided - myApp general application should configure vitest correctly 1`] = `
"/// <reference types='vitest' />
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';
import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { nxCopyAssetsPlugin } from '@nx/vite/plugins/nx-copy-assets.plugin';

export default defineConfig({
  root: __dirname,
  cacheDir: '../node_modules/.vite/myApp',
  plugins: [vue(), nxViteTsPaths(), nxCopyAssetsPlugin(['*.md'])],
  // Uncomment this if you are using workers.
  // worker: {
  //  plugins: [ nxViteTsPaths() ],
  // },
  test: {
    watch: false,
    globals: true,
    environment: 'jsdom',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
    reporters: ['default'],
    coverage: {
      reportsDirectory: '../coverage/myApp',
      provider: 'v8',
    },
  },
});
"
`;

exports[`app generated files content - as-provided - myApp general application should configure vitest correctly 2`] = `
"{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "../dist/out-tsc",
    "types": [
      "vitest/globals",
      "vitest/importMeta",
      "vite/client",
      "node",
      "vitest"
    ],
    "composite": true
  },
  "include": [
    ".nuxt/nuxt.d.ts",
    "vite.config.ts",
    "vite.config.mts",
    "vitest.config.ts",
    "vitest.config.mts",
    "src/**/*.test.ts",
    "src/**/*.spec.ts",
    "src/**/*.test.tsx",
    "src/**/*.spec.tsx",
    "src/**/*.test.js",
    "src/**/*.spec.js",
    "src/**/*.test.jsx",
    "src/**/*.spec.jsx",
    "src/**/*.d.ts"
  ]
}
"
`;

exports[`app generated files content - as-provided - myApp general application should configure vitest correctly 3`] = `
"{
  "files": [],
  "include": [".nuxt/nuxt.d.ts"],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ],
  "extends": "../tsconfig.base.json"
}
"
`;

exports[`app generated files content - as-provided - myApp general application should create all new files in the correct location 1`] = `
[
  ".prettierrc",
  "package.json",
  "nx.json",
  "tsconfig.base.json",
  ".prettierignore",
  "myApp/project.json",
  "myApp/.npmrc",
  "myApp/nuxt.config.ts",
  "myApp/src/app.vue",
  "myApp/src/pages/about.vue",
  "myApp/src/pages/index.vue",
  "myApp/src/public/.gitkeep",
  "myApp/src/public/favicon.ico",
  "myApp/src/server/api/greet.ts",
  "myApp/src/server/tsconfig.json",
  "myApp/src/components/NxWelcome.vue",
  "myApp/tsconfig.app.json",
  "myApp/tsconfig.json",
  ".gitignore",
  ".eslintrc.json",
  ".eslintignore",
  "myApp/.eslintrc.json",
  "myApp/tsconfig.spec.json",
  "vitest.workspace.ts",
  "myApp/vitest.config.ts",
  "myApp-e2e/project.json",
  "myApp-e2e/src/example.spec.ts",
  "myApp-e2e/playwright.config.ts",
  "myApp-e2e/tsconfig.json",
  "myApp-e2e/.eslintrc.json",
  ".vscode/extensions.json",
]
`;

exports[`app generated files content - as-provided - myApp styles setup should configure css 1`] = `
"import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { defineNuxtConfig } from 'nuxt/config';

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  workspaceDir: '../',
  srcDir: 'src',
  devtools: { enabled: true },
  devServer: {
    host: 'localhost',
    port: 4200,
  },
  typescript: {
    typeCheck: true,
    tsConfig: {
      extends: '../tsconfig.app.json', // Nuxt copies this string as-is to the \`./.nuxt/tsconfig.json\`, therefore it needs to be relative to that directory
    },
  },
  imports: {
    autoImport: true,
  },
  css: ['~/assets/css/styles.css'],
  vite: {
    plugins: [nxViteTsPaths()],
  },
});
"
`;

exports[`app generated files content - as-provided - myApp styles setup should configure less 1`] = `
"import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { defineNuxtConfig } from 'nuxt/config';

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  workspaceDir: '../',
  srcDir: 'src',
  devtools: { enabled: true },
  devServer: {
    host: 'localhost',
    port: 4200,
  },
  typescript: {
    typeCheck: true,
    tsConfig: {
      extends: '../tsconfig.app.json', // Nuxt copies this string as-is to the \`./.nuxt/tsconfig.json\`, therefore it needs to be relative to that directory
    },
  },
  imports: {
    autoImport: true,
  },
  css: ['~/assets/css/styles.less'],
  vite: {
    plugins: [nxViteTsPaths()],
  },
});
"
`;

exports[`app generated files content - as-provided - myApp styles setup should configure scss 1`] = `
"import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { defineNuxtConfig } from 'nuxt/config';

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  workspaceDir: '../',
  srcDir: 'src',
  devtools: { enabled: true },
  devServer: {
    host: 'localhost',
    port: 4200,
  },
  typescript: {
    typeCheck: true,
    tsConfig: {
      extends: '../tsconfig.app.json', // Nuxt copies this string as-is to the \`./.nuxt/tsconfig.json\`, therefore it needs to be relative to that directory
    },
  },
  imports: {
    autoImport: true,
  },
  css: ['~/assets/css/styles.scss'],
  vite: {
    plugins: [nxViteTsPaths()],
  },
});
"
`;

exports[`app generated files content - as-provided - myApp styles setup should not configure styles 1`] = `
"import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
import { defineNuxtConfig } from 'nuxt/config';

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  workspaceDir: '../',
  srcDir: 'src',
  devtools: { enabled: true },
  devServer: {
    host: 'localhost',
    port: 4200,
  },
  typescript: {
    typeCheck: true,
    tsConfig: {
      extends: '../tsconfig.app.json', // Nuxt copies this string as-is to the \`./.nuxt/tsconfig.json\`, therefore it needs to be relative to that directory
    },
  },
  imports: {
    autoImport: true,
  },
  vite: {
    plugins: [nxViteTsPaths()],
  },
});
"
`;
