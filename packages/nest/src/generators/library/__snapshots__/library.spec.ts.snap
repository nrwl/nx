// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lib --testEnvironment should set target jest testEnvironment to jsdom 1`] = `
"export default {
  displayName: 'my-lib',
  preset: '../jest.preset.js',
  transform: {
    '^.+\\\\.[tj]s$': ['ts-jest', { tsconfig: '<rootDir>/tsconfig.spec.json' }],
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-lib',
};
"
`;

exports[`lib --testEnvironment should set target jest testEnvironment to node by default 1`] = `
"export default {
  displayName: 'my-lib',
  preset: '../jest.preset.js',
  testEnvironment: 'node',
  transform: {
    '^.+\\\\.[tj]s$': ['ts-jest', { tsconfig: '<rootDir>/tsconfig.spec.json' }],
  },
  moduleFileExtensions: ['ts', 'js', 'html'],
  coverageDirectory: '../coverage/my-lib',
};
"
`;

exports[`lib --unit-test-runner none should not generate test configuration 1`] = `
{
  "compilerOptions": {
    "forceConsistentCasingInFileNames": true,
    "importHelpers": true,
    "module": "commonjs",
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noPropertyAccessFromIndexSignature": true,
    "strict": true,
  },
  "extends": "../tsconfig.base.json",
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.lib.json",
    },
  ],
}
`;

exports[`lib nested should create a local tsconfig.json 1`] = `
{
  "compilerOptions": {
    "forceConsistentCasingInFileNames": true,
    "importHelpers": true,
    "module": "commonjs",
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noPropertyAccessFromIndexSignature": true,
    "strict": true,
  },
  "extends": "../../tsconfig.base.json",
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.lib.json",
    },
    {
      "path": "./tsconfig.spec.json",
    },
  ],
}
`;

exports[`lib not nested should add the @Global decorator 1`] = `
"import { Module, Global } from '@nestjs/common';

@Global()
@Module({
  controllers: [],
  providers: [],
  exports: [],
})
export class MyLibModule {}
"
`;

exports[`lib not nested should create a local tsconfig.json 1`] = `
{
  "compilerOptions": {
    "forceConsistentCasingInFileNames": true,
    "importHelpers": true,
    "module": "commonjs",
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noPropertyAccessFromIndexSignature": true,
    "strict": true,
  },
  "extends": "../tsconfig.base.json",
  "files": [],
  "include": [],
  "references": [
    {
      "path": "./tsconfig.lib.json",
    },
    {
      "path": "./tsconfig.spec.json",
    },
  ],
}
`;

exports[`lib not nested should generate files 1`] = `
{
  "extends": [
    "../.eslintrc.json",
  ],
  "ignorePatterns": [
    "!**/*",
  ],
  "overrides": [
    {
      "files": [
        "*.ts",
        "*.tsx",
        "*.js",
        "*.jsx",
      ],
      "rules": {},
    },
    {
      "files": [
        "*.ts",
        "*.tsx",
      ],
      "rules": {},
    },
    {
      "files": [
        "*.js",
        "*.jsx",
      ],
      "rules": {},
    },
  ],
}
`;

exports[`lib not nested should provide the controller and service 1`] = `
"import { Module } from '@nestjs/common';
import { MyLibController } from './my-lib.controller';
import { MyLibService } from './my-lib.service';

@Module({
  controllers: [MyLibController],
  providers: [MyLibService],
  exports: [MyLibService],
})
export class MyLibModule {}
"
`;

exports[`lib not nested should provide the controller and service 2`] = `
"import { Controller } from '@nestjs/common';
import { MyLibService } from './my-lib.service';

@Controller('my-lib')
export class MyLibController {
  constructor(private myLibService: MyLibService) {}
}
"
`;

exports[`lib not nested should provide the controller and service 3`] = `
"export * from './lib/my-lib.controller';
export * from './lib/my-lib.service';
export * from './lib/my-lib.module';
"
`;
