name: <%= workflowName %>

trigger:
  - <%= mainBranch %>
pr:
  - <%= mainBranch %>

variables:
  CI: 'true'
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(System.PullRequest.PullRequestNumber)<% if(!useRunMany){ %>
    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
    BASE_SHA: $(git merge-base $(TARGET_BRANCH) HEAD)<% } %>
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(Build.SourceBranchName)<% if(!useRunMany){ %>
    BASE_SHA: $(git rev-parse HEAD~1)
  HEAD_SHA: $(git rev-parse HEAD)<% } %>

jobs:
  - job: main
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        fetchDepth: 0
        fetchFilter: tree:0<% if(!useRunMany){ %>
      # Set Azure Devops CLI default settings
      - bash: az devops configure --defaults organization=$(System.TeamFoundationCollectionUri) project=$(System.TeamProject)
        displayName: 'Set default Azure DevOps organization and project'
      # Get last successfull commit from Azure Devops CLI
      - bash: |
          LAST_SHA=$(az pipelines build list --branch $(Build.SourceBranchName) --definition-ids $(System.DefinitionId) --result succeeded --top 1 --query "[0].triggerInfo.\"ci.sourceSha\"")
          if [ -z "$LAST_SHA" ]
          then
            echo "Last successful commit not found. Using fallback 'HEAD~1': $BASE_SHA"
          else
            echo "Last successful commit SHA: $LAST_SHA"
            echo "##vso[task.setvariable variable=BASE_SHA]$LAST_SHA"
          fi
        displayName: 'Get last successful commit SHA'
        condition: ne(variables['Build.Reason'], 'PullRequest')
        env:
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)<% } %>

      <% if(packageManager == 'pnpm'){ %>
      - script: npm install --prefix=$HOME/.local -g pnpm@8
        displayName: Install PNPM

      <% } %>
      <% if(packageManager == 'bun'){ %>
      - script: npm install --prefix=$HOME/.local -g Bun
        displayName: Install Bun

      <% } %>

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      <% if (connectedToCloud) { %># Uncomment this line to enable task distribution<% } else { %># Connect your workspace by running "nx connect" and uncomment this line to enable task distribution<% } %>
      # - script: <%= packageManagerPreInstallPrefix %> nx start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="<% if(hasE2E){ %>e2e-ci<% } else { %>build<% } %>"

      - script: <%= packageManagerInstall %><% if(hasCypress){ %>
      - script: <%= packageManagerPrefix %> cypress install<% } %><% if(hasPlaywright){ %>
      - script: <%= packageManagerPrefix %> playwright install --with-deps<% } %><% if(!useRunMany){ %>
      - script: git branch --track <%= mainBranch %> origin/<%= mainBranch %>
        condition: eq(variables['Build.Reason'], 'PullRequest')<% } %>

<% for (const command of commands) { %><% if (command.comments) { %><% for (const comment of command.comments) { %>
      # <%- comment %><% } %><% } %><% if (command.command) { %>
      - script: <%= command.command %><% if (command.alwaysRun) { %>
        condition: always()<% } %><% } %><% } %>
