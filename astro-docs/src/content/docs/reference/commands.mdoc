---
title: Nx Commands
description: A comprehensive reference of all available Nx CLI commands for modifying code, running tasks, displaying information, and integrating with Nx Cloud.
sidebar:
  order: 1
  label: Commands
---


The Nx CLI provides many commands. They are organized here into commands that:

- [Modify Code](#modify-code)
- [Run Tasks](#run-tasks)
- [Display Information](#display-information)
- [Integrate with Nx Cloud](#integrate-with-nx-cloud)

There is also a section for separate commands that can [create a new Nx workspace](#create-commands) for you.

{% aside type="note" title="Parsing Nx Commands" %}

If the command that you pass to Nx is not one of the keywords listed below, it will try to interpret the command as if it were a task. So Nx will parse your command in the following ways and execute the first syntax that is valid.

1. `nx [built-in-command] [...arguments]`
2. `nx [task-name-for-root-project] [...arguments]`
3. `nx [task-name] [project-name] [...arguments]`

{% /aside %}

## Modify Code

These commands modify your codebase in some way.

### `nx init`

Adds Nx to any type of workspace. It installs nx, creates an `nx.json` configuration file and optionally sets up remote caching.

```shell {% frame="none" %}
nx init
```

{% cardgrid %}

{% linkcard title="nx init"  href="/reference/core-api/nx/documents/init" /%}
{% linkcard title="Add to Existing Monorepo"  href="/recipes/adopting-nx/adding-to-monorepo" /%}
{% linkcard title="Add to Any Project"  href="/recipes/adopting-nx/adding-to-existing-project" /%}
{% linkcard title="Migrate from Angular CLI" href="technologies/angular/migration/angular" /%}

{% /cardgrid %}

### `nx add`

Install a plugin and initialize it.

```shell {% frame="none" %}
nx add my-plugin
```

{% cardgrid %}

{% linkcard title="nx add"  href="/reference/core-api/nx/documents/add" /%}
{% linkcard title="Plugin Registry"  href="/plugin-registry" /%}

{% /cardgrid %}

### `nx generate`

Runs a generator that creates and/or modifies files based on a generator from a plugin.

```shell {% frame="none" %}
nx generate @nx/react:component libs/my-lib/src/lib/my-component
```

{% cardgrid %}
{% linkcard title="nx generate" href="/reference/core-api/nx/documents/generate" /%}
{% linkcard title="Generate Code"  href="/features/generate-code" /%}
{% /cardgrid %}

### `nx migrate`

Creates a migrations file or runs migrations from the migrations file.

```shell {% frame="none" %}
nx migrate latest
nx migrate --run-migrations
```

{% cardgrid %}
{% linkcard title="nx migrate" href="/reference/core-api/nx/documents/migrate" /%}
{% linkcard title="Automate Updating Dependencies" href="/features/automate-updating-dependencies" /%}
{% /cardgrid %}

### `nx import`

Import code and git history from another repository into this repository.

```shell {% frame="none" %}
nx import https://github.com/myorg/inventory-app.git apps/inventory
nx import ../inventory-app apps/inventory
```

{% cardgrid %}
{% linkcard title="nx import" href="/reference/core-api/nx/documents/import" /%}
{% linkcard title="Import an Existing Project into an Nx Workspace" href="/recipes/adopting-nx/import-project" /%}
{% /cardgrid %}

### `nx repair`

Repair any configuration that is no longer supported by Nx.

Specifically, this will run every migration within the nx package against the current repository. Doing so should fix any configuration details left behind if the repository was previously updated to a new Nx version without using nx migrate.

If your repository has only ever updated to newer versions of Nx with nx migrate, running nx repair should do nothing.

```shell {% frame="none" %}
nx repair
```

{% cardgrid %}
{% linkcard title="nx repair" href="/reference/core-api/nx/documents/repair" /%}
{% /cardgrid %}

### `nx sync`

Run all sync generators

```shell {% frame="none" %}
nx sync
nx sync:check
```

{% cardgrid %}
{% linkcard title="nx sync" href="/reference/core-api/nx/documents/sync" /%}
{% linkcard title="nx sync:check" href="/reference/core-api/nx/documents/sync-check" /%}
{% linkcard title="Sync Generators"  href="/concepts/sync-generators" /%}
{% linkcard title="Register a Sync Generator" href="/extending-nx/recipes/create-sync-generator" /%}
{% /cardgrid %}

### `nx format`

Overwrite un-formatted files or check for un-formatted files

```shell {% frame="none" %}
nx format
nx format:check
```

{% cardgrid %}
{% linkcard title="nx format" href="/reference/core-api/nx/documents/format-write" /%}
{% linkcard title="nx format:check" href="/reference/core-api/nx/documents/format-check" /%}
{% /cardgrid %}

## Run Tasks

These commands run tasks on your code.

### `nx run`

Run a target for a project

```shell {% frame="none" %}
nx run my-app:build
nx build my-app
```

{% cardgrid %}
{% linkcard title="nx run" href="/reference/core-api/nx/documents/run" /%}
{% linkcard title="Run Tasks" href="/features/run-tasks" /%}
{% /cardgrid %}

### `nx run-many`

Run target for multiple listed projects

```shell {% frame="none" %}
nx run-many --target=build
```

{% cardgrid %}
{% linkcard title="nx run-many" href="/reference/core-api/nx/documents/run-many" /%}
{% linkcard title="Run Tasks" href="/features/run-tasks" /%}
{% /cardgrid %}

### `nx affected`

Run target for affected projects

```shell {% frame="none" %}
nx affected --target=build
```

{% cardgrid %}
{% linkcard title="nx affected" href="/reference/core-api/nx/documents/affected" /%}
{% linkcard title="Run Only Tasks Affected by a PR" href="/ci/features/affected" /%}
{% /cardgrid %}

### `nx exec`

Executes any command as if it was a target on the project

```json
// package.json
{
  "scripts": {
    "build": "nx exec -- node ./my-custom-build.js"
  }
}
```

{% cardgrid %}
{% linkcard title="nx exec" href="/reference/core-api/nx/documents/exec" /%}
{% linkcard title="Run Root Level NPM Scripts with Nx" href="/recipes/running-tasks/root-level-scripts#run-rootlevel-npm-scripts-with-nx" /%}
{% /cardgrid %}

### `nx watch`

Watch for changes within projects, and execute commands

```shell {% frame="none" %}
nx watch --projects=assets -- nx build assets
```

{% cardgrid %}
{% linkcard title="nx watch" href="/reference/core-api/nx/documents/watch" /%}
{% linkcard title="Workspace Watching" href="/recipes/running-tasks/workspace-watching" /%}
{% /cardgrid %}

### `nx release`

Orchestrate versioning and publishing of applications and libraries

```shell {% frame="none" %}
nx release version
nx release changelog
nx release publish
```

{% cardgrid %}
{% linkcard title="nx release" href="/reference/core-api/nx/documents/release" /%}
{% linkcard title="Manage Releases" href="/features/manage-releases" /%}
{% /cardgrid %}

### `nx reset`

Clears cached Nx artifacts and metadata about the workspace and shuts down the Nx Daemon.

```shell {% frame="none" %}
nx reset
```

{% cardgrid %}
{% linkcard title="nx reset" href="/reference/core-api/nx/documents/reset" /%}
{% /cardgrid %}

## Display Information

### `nx show`

Show information about the workspace (e.g., list of projects)

```shell {% frame="none" %}
nx show projects
nx show project my-app
```

{% cardgrid %}
{% linkcard title="nx show" href="/reference/core-api/nx/documents/show" /%}
{% linkcard title="Explore Projects in Your Workspace" href="/features/explore-graph#explore-projects-in-your-workspace" /%}
{% /cardgrid %}

### `nx graph`

Graph dependencies within workspace

```shell {% frame="none" %}
nx graph
```

{% cardgrid %}
{% linkcard title="nx graph" href="/reference/core-api/nx/documents/dep-graph" /%}
{% linkcard title="Explore Your Workspace" href="/features/explore-graph" /%}
{% /cardgrid %}

### `nx list`

Lists installed plugins, capabilities of installed plugins and other available plugins.

```shell {% frame="none" %}
nx list
nx list my-plugin
```

{% cardgrid %}
{% linkcard title="nx list" href="/reference/core-api/nx/documents/list" /%}
{% /cardgrid %}

### `nx report`

Reports useful version numbers to copy into the Nx issue template

```shell {% frame="none" %}
nx report
```

{% cardgrid %}
{% linkcard title="nx report" href="/reference/core-api/nx/documents/report" /%}
{% /cardgrid %}

### `nx daemon`

Prints information about the Nx Daemon process or starts a daemon process

```shell {% frame="none" %}
nx daemon
```

{% cardgrid %}
{% linkcard title="nx daemon" href="/reference/core-api/nx/documents/daemon" /%}
{% linkcard title="Nx Daemon" href="/concepts/nx-daemon" /%}
{% /cardgrid %}

### `nx mcp`

Starts the Nx [MCP server](https://modelcontextprotocol.io/introduction) for exposing Nx tools to various AI systems (VSCode, Cursor, Claude, ...)

{% cardgrid %}
{% linkcard title="MCP" href="/reference/core-api/nx/documents/mcp" /%}
{% linkcard title="Enhance Your LLM" href="/features/enhance-AI" /%}
{% /cardgrid %}

## Integrate with Nx Cloud

### `nx connect`

Connect an Nx workspace to Nx Cloud

```shell {% frame="none" %}
nx connect
```

{% cardgrid %}
{% linkcard title="nx connect" href="/reference/core-api/nx/documents/connect-to-nx-cloud" /%}
{% linkcard title="Connect to Nx Cloud" href="/ci/recipes/set-up" /%}
{% /cardgrid %}

### `nx login`

Login to Nx Cloud. This command is an alias for [`nx-cloud login`](/ci/reference/nx-cloud-cli#npx-nxcloud-login).

```shell {% frame="none" %}
nx login
```

{% cardgrid %}
{% linkcard title="nx login" href="/reference/core-api/nx/documents/login" /%}
{% linkcard title="Personal Access Tokens" href="/ci/recipes/security/personal-access-tokens" /%}
{% /cardgrid %}

### `nx logout`

Logout from Nx Cloud. This command is an alias for [`nx-cloud logout`](/ci/reference/nx-cloud-cli#npx-nxcloud-logout).

```shell {% frame="none" %}
nx logout
```

{% cardgrid %}
{% linkcard title="nx logout" href="/reference/core-api/nx/documents/logout" /%}
{% linkcard title="Personal Access Tokens" href="/ci/recipes/security/personal-access-tokens" /%}
{% /cardgrid %}

### `nx record`

Records command execution for distributed task execution. This command is an alias for [`nx-cloud record`](/ci/reference/nx-cloud-cli#npx-nxcloud-record).

```shell {% frame="none" %}
nx record -- nx run my-app:build
```

{% cardgrid %}
{% linkcard title="nx record" href="/reference/core-api/nx/documents/record" /%}
{% linkcard title="Distribute Task Execution" href="/ci/features/distribute-task-execution" /%}
{% /cardgrid %}

### `nx start-ci-run`

Starts a new CI run for distributed task execution. This command is an alias for [`nx-cloud start-ci-run`](/ci/reference/nx-cloud-cli#npx-nxcloud-start-ci-run).

```shell {% frame="none" %}
nx start-ci-run
```

{% cardgrid %}
{% linkcard title="nx start-ci-run" href="/reference/core-api/nx/documents/start-ci-run" /%}
{% linkcard title="Distribute Task Execution" href="/ci/features/distribute-task-execution" /%}
{% /cardgrid %}

### `nx fix-ci`

Fixes CI failures with AI-powered suggestions. This command is an alias for [`nx-cloud fix-ci`](/ci/reference/nx-cloud-cli#npx-nxcloud-fix-ci).

```shell {% frame="none" %}
nx fix-ci
```

{% cardgrid %}
{% linkcard title="nx fix-ci" href="/reference/core-api/nx/documents/fix-ci" /%}
{% /cardgrid %}

## Create Commands

### `create-nx-workspace`

Create a new Nx workspace

```shell {% frame="none" %}
npx create-nx-workspace@latest
```

{% cardgrid %}
{% linkcard title="create-nx-workspace" href="/reference/core-api/nx/documents/create-nx-workspace" /%}
{% /cardgrid %}

### `create-nx-plugin`

Create a new Nx workspace with a preset designed for writing an Nx plugin

```shell {% frame="none" %}
npx create-nx-plugin@latest
```

{% cardgrid %}
{% linkcard title="Extending Nx with Plugins" href="/extending-nx/intro/getting-started" /%}
{% /cardgrid %}
