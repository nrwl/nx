---
title: Node.js Plugin for Nx
description: Learn how to use the @nx/node plugin to create and manage Node.js applications and libraries in your Nx workspace, including setup, building, and testing.
sidebar:
  label: Introduction
---

The Node Plugin contains generators and executors to manage Node applications within an Nx workspace. It provides:

## Setting Up @nx/node

### Installation

{% aside type="note" title="Keep Nx Package Versions In Sync" %}
Make sure to install the `@nx/node` version that matches the version of `nx` in your repository. If the version numbers get out of sync, you can encounter some difficult to debug errors. You can [fix Nx version mismatches with this recipe](/docs/guides/tips-n-tricks/keep-nx-versions-in-sync).
{% /aside %}

In any Nx workspace, you can install `@nx/node` by running the following command:

```shell {% frame="none" %}
nx add @nx/node
```

This will install the correct version of `@nx/node`.

## Using the @nx/node Plugin

### Creating Applications

You can add a new application with the following:

```shell {% frame="none" %}
nx g @nx/node:application apps/my-new-app
```

You can run your application with `nx serve my-new-app`, which starts it in watch mode.

### Creating Libraries

Node libraries are a good way to separate features within your organization. To create a Node library run the following command:

```shell {% frame="none" %}
nx g @nx/node:lib libs/my-new-lib

# If you want the library to be buildable or publishable to npm
nx g @nx/node:lib libs/my-new-lib --buildable
nx g @nx/node:lib libs/my-new-lib \
--publishable \
--importPath=@myorg/my-new-lib
```

## Using Node

### Testing Projects

You can run unit tests with:

```shell {% frame="none" %}
nx test my-new-app
nx test my-new-lib
```

Replace `my-new-app` with the name or your project. This command works for both applications and libraries.

### Building Projects

Node applications can be build with:

```shell {% frame="none" %}
nx build my-new-app
```

And if you generated a library with `--buildable`, then you can build a library as well:

```shell {% frame="none" %}
nx build my-new-lib
```

The output is in the `dist` folder. You can customize the output folder by setting `outputPath` in the project's `project.json` file.

### Application Proxies

Generating Node applications has an option to configure other projects in the workspace to proxy API requests. This can be done by passing the `--frontendProject` with the project name you wish to enable proxy support for.

```shell {% frame="none" %}
nx g @nx/node:application apps/my-new-app \
--frontendProject my-react-app
```

### Debugging

#### VSCode Integration

When generating Node applications, Nx automatically creates a VSCode debugging configuration for seamless development experience:

- **Automatic setup**: A `.vscode/launch.json` file is created with pre-configured debugging settings.
- **Smart port allocation**: Debug ports are automatically assigned starting from 9229, preventing conflicts between multiple applications.
- **Source map support**: Webpack configurations include `devtoolModuleFilenameTemplate` for accurate source mapping.
- **Multi-format support**: Supports debugging `.js`, `.mjs`, and `.cjs` output files.

To debug your Node application in VSCode:

1. Open your workspace in VSCode.
2. Set breakpoints in your TypeScript source files.
3. Go to the Debug panel `(Ctrl+Shift+D)`.
4. Select "Debug `{your-app-name}` with Nx" from the dropdown.
5. Click the play button or press `F5`.

The debugger will automatically:

- Start your application with `nx serve`.
- Attach to the Node.js debugger on the allocated port.
- Map compiled JavaScript back to your TypeScript source files.

#### Manual Debugging

For advanced debugging scenarios, you can manually configure the debug port by setting the port option in the `serve` target in the project.json, or by running the serve command with `--port <number>`.

For additional information on Node.js debugging, see the [Node.js debugging getting started guide](https://nodejs.org/en/docs/guides/debugging-getting-started/#inspector-clients).

## More Documentation

- [Using Cypress](/docs/technologies/test-tools/cypress/introduction)
- [Using Jest](/docs/technologies/test-tools/jest/introduction)