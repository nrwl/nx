---
title: Source Control Integration
description: Learn how to integrate Nx Cloud with your source control platform including GitHub, Bitbucket, GitLab, and Azure DevOps for PR/MR integration.
sidebar:
  label: Source Control Integration
---

Integrate Nx Cloud with your source control platform to access run results, logs, and build insights directly from your pull requests or merge requests.

{% tabs syncKey="ci-provider" %}
{% tabitem label="GitHub" %}

The [Nx Cloud GitHub App](https://github.com/marketplace/official-nx-cloud-app) lets you access the result of every run—with all its logs and build insights—straight from your PR.

## Install the App

For the best experience, install the [Nx Cloud GitHub App](https://github.com/marketplace/official-nx-cloud-app). Using the app provides the most seamless authentication experience. This is not required if you wish to authenticate with a personal access token that you generate yourself.

## Connecting Your Workspace

Once you have installed the Nx Cloud GitHub App, you must link your workspace to the installation. To do this, sign in to Nx Cloud and navigate to the VCS Integrations setup page. This page can be found in your workspace settings, you need to be admin of the organization in order to access it.
Once on the VCS Integrations setup page, you can choose what VCS you want to connect to your workspace.

![Access VCS Setup](../../../../assets/nx-cloud/set-up/access-vcs-setup.webp)

### Choosing an Authentication Method

It is easier to configure the Nx Cloud GitHub Integration to use its GitHub App to authenticate, and this method should be preferred for users on Nx Public Cloud. Advanced users or Nx Enterprise clients may instead wish to generate a personal access token instead.

#### Using the GitHub App

To use the Nx Cloud GitHub App for authentication, select the radio button and then click "Connect".
This will verify that Nx Cloud can connect to your repo. Upon a successful test, your configuration is saved.
Check the "_CI Platform Considerations_" section below and if there are no additional instructions for your platform of choice, setup is complete.

![Use GitHub App for Authentication](../../../../assets/nx-cloud/set-up/use-github-app-auth.webp)

#### Using a Personal Access Token

Github supports two [Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#about-personal-access-tokens) types: Classic and Fine-grained.

To use a Personal Access Token for authentication, one must be generated with proper permissions. The minimum required permissions are shown in the screenshot below.

##### Classic Token personal access token
![Minimum GitHub Personal Access Token Permissions](../../../../assets/nx-cloud/set-up/minimal-github-access-token.webp)

##### Fine-grained personal access token

![Minimum GitHub Fine-grained Personal Access Token Permissions](../../../../assets/nx-cloud/set-up/fine-grained-gh-pat-permissions.avif)

Once this token is created, select the radio button for providing a personal access token, paste the value, and then click "Connect". This will verify that Nx Cloud can connect to your repo. Upon a successful test, your configuration is saved. Check the "_CI Platform Considerations_" section below, and if there are no additional instructions for your platform of choice, setup is complete.

### Advanced Configuration

If your company runs a self-hosted GitHub installation, you may need to override the default URL that Nx Cloud uses to connect to the GitHub API. To do so, check the box labeled "Override GitHub API URL" and enter the correct URL for your organization.

## CI Platform Considerations

If you are using CircleCI, TravisCI, GitHub Actions or GitHub, there is nothing else you need to do. If you are using other CI providers, you need to set the `NX_BRANCH` environment variable in your CI configuration. The variable has to be set to a PR number.

For instance, this is an example of doing it in Azure pipelines.

### Azure Pipelines

```yml
// azure-pipelines.yml
variables:
  NX_BRANCH: $(System.PullRequest.PullRequestNumber)
```

### CircleCI

Make sure [GitHub checks are enabled](https://circleci.com/docs/2.0/enable-checks/#to-enable-github-checks).

### Jenkins

[Install the Jenkins plugin](https://plugins.jenkins.io/github-checks/).

Ensure this step from the plugin instructions is followed:

    Prerequisite: only GitHub App with proper permissions can publish checks, this guide helps you authenticate your Jenkins as a GitHub App.

## Github Status Checks

The Nx Cloud GitHub Integration updates your PR with commit statuses that reflect the real-time progress of your runs. These statuses are generated dynamically based on your running commands. Enforcing these dynamically-named checks within your branch protection rules is not recommended, as it can result in stuck checks displaying `Waiting for status to be reported`.

From your repository, go to `Settings -> Branches -> Protect matching branches` and ensure that no Nx Cloud status checks are listed in the `Require status checks to pass before merging` list. Enforcing that status checks pass on your default branch is sufficient.
![Ensure that any NxCloud status check is deselected from your branch protection rules](../../../../assets/nx-cloud/set-up/do-not-enforce-nx-cloud-status-checks.webp)
{% /tabitem %}

{% tabitem label="Bitbucket" %}
The Nx Cloud + Bitbucket Integration lets you access the result of every run—with all its logs and build insights—straight from your PR.


### Using an App Password

If you are using BitBucket Cloud (bitbucket.org) and are not self-hosting it, you can enable an ["app password" for authentication](https://support.atlassian.com/bitbucket-cloud/docs/create-an-app-password).

The minimum required permissions are write access to PRs:

![Create App Password](../../../../assets/nx-cloud/set-up/minimal-bitbucket-cloud-app-password.webp)

Once the app password is created, save it in a secure location and then head back to your workspace settings on NxCloud and let's set up a BitBucket integration:

![Access VCS Setup](../../../../assets/nx-cloud/set-up/access-vcs-setup.webp)

1. Fill-in all the required fields for selecting your Bitbucket repository
2. Username is found on the [account settings](https://bitbucket.org/account/settings/) screen (it is not your email address)
3. Paste your app password created earlier into the Access Token box
4. That's it!

### Using an HTTP Access Tokens

If you are using BitBucket Data Center (on-prem) you need to enable ["HTTP Access Tokens" for authentication](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html).

{% aside type="note" title="User linked access tokens" %}
Due to the type of APIs NxCloud needs to call, we need to create an access [**at the user level**](https://confluence.atlassian.com/bitbucketserver/http-access-tokens-939515499.html). Repo level access tokens will not work.
{% /aside %}

The minimum required permissions are write access to the repository:

![Create an HTTP Access Token](../../../../assets/nx-cloud/set-up/bitbucket-data-center-access-token.png)

Once the token is created, save it in a secure location and then head back to your workspace settings on NxCloud and let's set up a BitBucket integration:

![Access VCS Setup](../../../../assets/nx-cloud/set-up/access-vcs-setup.webp)

1. Fill-in all the required fields for selecting your Bitbucket repository
2. Username is found on the [account settings](https://your-bitbucket-instance.com/profile) screen (it is not your email address)
3. Paste your access token created earlier into the Access Token box
4. Make sure you give NxCloud the URL of your BitBucket instance (this can be in the simple form of `https://your-bitbucket-instance.com`)
5. That's it!
{% /tabitem %}

{% tabitem label="GitLab" %}

The Nx Cloud GitLab Integration lets you access the result of every run—with all its logs and build insights—straight from your Merge Requests.

### Connecting Your Workspace

![Access VCS Setup](../../../../assets/nx-cloud/set-up/access-vcs-setup.webp)

Once on the VCS Integrations setup page, select "GitLab". You will be prompted to enter your project's ID.

![Locate Gitlab Project ID](../../../../assets/nx-cloud/set-up/find-gitlab-project-id.webp)

To locate the ID for your project, visit the home page of your repository on GitLab. The value can be found underneath the name of your project, and has a clickable button to copy to your clipboard.

![Add GitLab Repository](../../../../assets/nx-cloud/set-up/add-gitlab-repository.webp)


### Using a Personal Access Token

To use a Personal Access Token for authentication, one must be generated with proper permissions. The minimum required permissions are shown in the screenshot below.

![Minimum GitLab Personal Access Token Permissions](../../../../assets/nx-cloud/set-up/minimal-gitlab-access-token.webp)

Once this token is created, select the radio button for providing a personal access token, paste the value, and then click "Connect".

This will verify that Nx Cloud can connect to your repo. Upon a successful test, your configuration is saved, and setup is complete.

### Advanced Configuration

If your company runs a self-hosted GitLab installation, you may need to override the default URL that Nx Cloud uses to connect to the GitLab API. To do so, check the box labeled "Override GitLab API URL" and enter the correct URL for your organization.
{% /tabitem %}

{% tabitem label="Azure" %}

The Nx Cloud + Azure Devops Integration lets you access the result of every run—with all its logs and build insights—straight from your PR.

## Connecting Your Workspace

![Access VCS Setup](../../../../assets/nx-cloud/set-up/access-vcs-setup.webp)

Once on the VCS Integrations setup page, select "Azure DevOps". You will be prompted to enter the name of your organization and project.

Identifying your organization and project can be done by looking at the URL of your project summary page.

```text
// URL format
https://dev.azure.com/[organization]/[project]
```

For example, the url `https://dev.azure.com/nrwl/my-monorepo-project` has an organization name of "nrwl", and a project name of "large-monorepo".

You will also need to provide the id of your Azure Git repository, this can either be the internal GUID identifier, if known, or you can use the name of the repository from the URL you use to access it.

For example, a URL of `https://dev.azure.com/nrwl/_git/large-monorepo` has the repository id of "large-monorepo".

![Add Azure DevOps Repository](../../../../assets/nx-cloud/set-up/add-azure-devops-repository.webp)

### Configuring Authentication

#### Using a Personal Access Token

To use a Personal Access Token for authentication, one must be generated with proper permissions. The minimum required permissions are shown in the screenshot below.

![Work Items - Read, Code - Read, Build - Read & execute, Release - Read, write, & execute](../../../../assets/nx-cloud/set-up/minimal-ado-access-token.webp)

Once this token is created paste the value and then click "Connect".

This will verify that Nx Cloud can connect to your repo. Upon a successful test, your configuration is saved, and setup is complete.

Please note that Azure DevOps will impose rate limits which can degrade the performance of the integration leading to missing data or functionality. To mitigate the impact, we recommend you assign the [Basic + Test plan](https://learn.microsoft.com/en-us/azure/devops/organizations/billing/buy-basic-access-add-users?view=azure-devops#assign-basic-or-basic--test-plans) to the user whose token you utilise for this integration.

### Advanced Configuration

If your company runs a self-hosted Azure DevOps installation, you may need to override the default URL that Nx Cloud uses to connect to the Azure Devops API. To do so, check the box labeled "Override Azure DevOps API URL" and enter the correct URL for your organization.
{% /tabitem %}
{% /tabs %}
