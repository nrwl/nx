{
  "name": "federate-module",
  "factory": "./src/generators/federate-module/federate-module#federateModuleGenerator",
  "schema": {
    "$schema": "https://json-schema.org/schema",
    "cli": "nx",
    "$id": "NxReactFederateModule",
    "title": "Federate Module",
    "description": "Create a federated module, which can be loaded by a Consumer (host) via a Producer (remote).",
    "examples": [
      {
        "command": "nx g federate-module MyModule --path=./src/component/my-cmp.ts --remote=myRemote --remoteDirectory=apps/myRemote",
        "description": "Create a federated module from myRemote, that exposes my-cmp from ./src/component/my-cmp.ts as MyModule."
      },
      {
        "command": "nx g federate-module MyModule --path=./src/component/my-cmp.ts --producer=myProducer --producerDirectory=apps/myProducer",
        "description": "Create a federated module from myProducer, that exposes my-cmp from ./src/component/my-cmp.ts as MyModule."
      }
    ],
    "type": "object",
    "properties": {
      "path": {
        "type": "string",
        "$default": { "$source": "argv", "index": 0 },
        "description": "The path to locate the federated module. This path should be relative to the workspace root and the file should exist.",
        "x-prompt": "What is the path to the module to be federated?"
      },
      "name": {
        "description": "The name of the module.",
        "type": "string",
        "x-prompt": "What name would you like to use for the module?",
        "pattern": "^[a-zA-Z][^:]*$",
        "x-priority": "important"
      },
      "remote": {
        "type": "string",
        "description": "The name of the Producer (remote).",
        "x-prompt": "What is/should the Producer (remote) be named?",
        "alias": "producer"
      },
      "remoteDirectory": {
        "description": "The directory of the new Producer (remote) application if one needs to be created.",
        "type": "string",
        "alias": "producerDirectory"
      },
      "style": {
        "description": "The file extension to be used for style files.",
        "type": "string",
        "default": "none",
        "alias": "s"
      },
      "linter": {
        "description": "The tool to use for running lint checks.",
        "type": "string",
        "enum": ["eslint"],
        "default": "eslint"
      },
      "skipFormat": {
        "description": "Skip formatting files.",
        "type": "boolean",
        "default": false,
        "x-priority": "internal"
      },
      "unitTestRunner": {
        "type": "string",
        "enum": ["jest", "none"],
        "description": "Test runner to use for unit tests.",
        "default": "jest"
      },
      "e2eTestRunner": {
        "type": "string",
        "enum": ["cypress", "playwright", "none"],
        "description": "Test runner to use for end to end (E2E) tests.",
        "x-prompt": "Which E2E test runner would you like to use?",
        "default": "cypress"
      },
      "host": {
        "type": "string",
        "description": "The Consumer (host) application for this Producer (remote)."
      },
      "bundler": {
        "description": "The bundler to use.",
        "type": "string",
        "enum": ["rspack", "webpack"],
        "default": "rspack"
      }
    },
    "required": ["name", "path", "remote"],
    "additionalProperties": false,
    "presets": []
  },
  "description": "Federate a module.",
  "hidden": false,
  "implementation": "/packages/react/src/generators/federate-module/federate-module#federateModuleGenerator.ts",
  "aliases": [],
  "path": "/packages/react/src/generators/federate-module/schema.json",
  "type": "generator"
}
