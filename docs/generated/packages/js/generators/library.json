{
  "name": "library",
  "factory": "./src/generators/library/library#libraryGeneratorInternal",
  "schema": {
    "$schema": "https://json-schema.org/schema",
    "$id": "NxTypescriptLibrary",
    "cli": "nx",
    "title": "Create a TypeScript Library",
    "description": "Create a TypeScript Library.",
    "type": "object",
    "properties": {
      "directory": {
        "type": "string",
        "description": "A directory where the lib is placed.",
        "$default": { "$source": "argv", "index": 0 },
        "x-prompt": "Which directory do you want to create the library in?"
      },
      "name": {
        "type": "string",
        "description": "Library name.",
        "x-priority": "important"
      },
      "bundler": {
        "description": "The bundler to use. Choosing 'none' means this library is not buildable.",
        "type": "string",
        "enum": ["swc", "tsc", "rollup", "vite", "esbuild", "none"],
        "default": "tsc",
        "x-prompt": "Which bundler would you like to use to build the library? Choose 'none' to skip build setup.",
        "x-priority": "important"
      },
      "linter": {
        "description": "The tool to use for running lint checks.",
        "type": "string",
        "enum": ["none", "eslint"],
        "x-priority": "important"
      },
      "unitTestRunner": {
        "description": "Test runner to use for unit tests.",
        "type": "string",
        "enum": ["none", "jest", "vitest"],
        "x-priority": "important"
      },
      "tags": {
        "type": "string",
        "description": "Add tags to the library (used for linting)."
      },
      "skipFormat": {
        "description": "Skip formatting files.",
        "type": "boolean",
        "default": false,
        "x-priority": "internal"
      },
      "skipPackageJson": {
        "description": "Do not add dependencies to `package.json`.",
        "type": "boolean",
        "default": false,
        "x-priority": "internal"
      },
      "skipTsConfig": {
        "type": "boolean",
        "description": "Do not update tsconfig.json for development experience.",
        "default": false,
        "x-priority": "internal"
      },
      "includeBabelRc": {
        "type": "boolean",
        "description": "Include a .babelrc configuration to compile TypeScript files"
      },
      "testEnvironment": {
        "type": "string",
        "enum": ["jsdom", "node"],
        "description": "The test environment to use if unitTestRunner is set to jest or vitest.",
        "default": "node"
      },
      "js": {
        "type": "boolean",
        "description": "Generate JavaScript files rather than TypeScript files.",
        "default": false
      },
      "strict": {
        "type": "boolean",
        "description": "Whether to enable tsconfig strict mode or not.",
        "default": true
      },
      "publishable": {
        "type": "boolean",
        "default": false,
        "description": "Configure the library ready for use with `nx release` (https://nx.dev/core-features/manage-releases).",
        "x-priority": "important"
      },
      "importPath": {
        "type": "string",
        "description": "The library name used to import it, like @myorg/my-awesome-lib. Required for publishable library.",
        "x-priority": "important"
      },
      "buildable": {
        "type": "boolean",
        "default": true,
        "description": "Generate a buildable library.",
        "x-deprecated": "Use the `bundler` option for greater control (swc, tsc, rollup, vite, esbuild, none)."
      },
      "setParserOptionsProject": {
        "type": "boolean",
        "description": "Whether or not to configure the ESLint `parserOptions.project` option. We do not do this by default for lint performance reasons.",
        "default": false
      },
      "config": {
        "type": "string",
        "enum": ["workspace", "project", "npm-scripts"],
        "default": "project",
        "description": "Determines whether the project's executors should be configured in `workspace.json`, `project.json` or as npm scripts.",
        "x-priority": "internal"
      },
      "compiler": {
        "type": "string",
        "enum": ["tsc", "swc"],
        "description": "The compiler used by the build and test targets",
        "x-deprecated": "Use the `bundler` option for greater control (swc, tsc, rollup, vite, esbuild, none)."
      },
      "skipTypeCheck": {
        "type": "boolean",
        "description": "Whether to skip TypeScript type checking for SWC compiler.",
        "default": false
      },
      "minimal": {
        "type": "boolean",
        "description": "Generate a library with a minimal setup. No README.md generated.",
        "default": false
      },
      "simpleName": {
        "description": "Don't include the directory in the generated file name.",
        "type": "boolean",
        "default": false
      },
      "useProjectJson": {
        "type": "boolean",
        "description": "Use a `project.json` configuration file instead of inlining the Nx configuration in the `package.json` file."
      }
    },
    "required": ["directory"],
    "examplesFile": "---\ntitle: JS library generator examples\ndescription: This page contains examples for the @nx/js:lib generator.\n---\n\nThe `@nx/js:lib` generator will generate a library for you, and it will configure it according to the options you provide.\n\n```bash\nnpx nx g @nx/js:lib libs/mylib\n```\n\nBy default, the library that is generated when you use this executor without passing any options, like the example above, will be a buildable library, using the `@nx/js:tsc` executor as a builder.\n\nYou may configure the tools you want to use to build your library, or bundle it too, by passing the `--bundler` flag. The `--bundler` flag controls the compiler and/or the bundler that will be used to build your library. If you choose `tsc` or `swc`, the result will be a buildable library using either `tsc` or `swc` as the compiler. If you choose `rollup` or `vite`, the result will be a buildable library using `rollup` or `vite` as the bundler. In the case of `rollup`, it will default to the `tsc` compiler. If you choose `esbuild`, you may use the [`esbuildOptions` property](https://esbuild.github.io/api/) in your `project.json` under the `build` target options to specify whether you wish to bundle your library or not.\n\n## Examples\n\n{% tabs %}\n\n{% tab label=\"Buildable with default compiler (tsc)\" %}\n\nGenerate a buildable library using the `@nx/js:tsc` executor. This uses `tsc` as the compiler.\n\n```bash\nnpx nx g @nx/js:lib libs/mylib\n```\n\n{% /tab %}\n\n{% tab label=\"Buildable with SWC compiler\" %}\n\nGenerate a buildable library using [SWC](https://swc.rs) as the compiler. This will use the `@nx/js:swc` executor.\n\n```bash\nnpx nx g @nx/js:lib libs/mylib --bundler=swc\n```\n\n{% /tab %}\n\n{% tab label=\"Buildable with tsc\" %}\n\nGenerate a buildable library using tsc as the compiler. This will use the `@nx/js:tsc` executor.\n\n```bash\nnpx nx g @nx/js:lib libs/mylib --bundler=tsc\n```\n\n{% /tab %}\n\n{% tab label=\"Buildable, with Rollup as a bundler\" %}\n\nGenerate a buildable library using [Rollup](https://rollupjs.org) as the bundler. This will use the `@nx/rollup:rollup` executor. It will also use [SWC](https://swc.rs) as the compiler.\n\n```bash\nnpx nx g @nx/js:lib libs/mylib --bundler=rollup\n```\n\nIf you do not want to use `swc` as the compiler, and want to use the default `babel` compiler, you can do so in your `project.json` under the `build` target options, using the [`compiler` property](/nx-api/rollup/executors/rollup#compiler):\n\n```jsonc {% fileName=\"libs/mylib/project.json\" %}\n\"build\": {\n  \"executor\": \"@nx/rollup:rollup\",\n  \"options\": {\n    //...\n    \"compiler\": \"babel\"\n  }\n}\n```\n\n{% /tab %}\n\n{% tab label=\"Buildable, with Vite as a bundler\" %}\n\nGenerate a buildable library using [Vite](https://vitejs.dev/) as the bundler. This will use the `@nx/vite:build` executor.\n\n```bash\nnpx nx g @nx/js:lib libs/mylib --bundler=vite\n```\n\n{% /tab %}\n\n{% tab label=\"Using ESBuild\" %}\n\nGenerate a buildable library using [ESBuild](https://esbuild.github.io/) as the bundler. This will use the `@nx/esbuild:esbuild` executor.\n\n```bash\nnpx nx g @nx/js:lib libs/mylib --bundler=esbuild\n```\n\nIf you want to specify whether you want to bundle your library or not, you can do so in your `project.json` under the `build` target options, using the [`esbuildOptions` property](https://esbuild.github.io/api/):\n\n```jsonc {% fileName=\"libs/mylib/project.json\" %}\n\"build\": {\n  \"executor\": \"@nx/esbuild:esbuild\",\n  \"options\": {\n    //...\n    \"esbuildOptions\": {\n        \"bundle\": true\n    }\n  }\n}\n```\n\n{% /tab %}\n\n{% tab label=\"Minimal publishing target\" %}\n\nGenerate a **publishable** library with a minimal publishing target. The result will be a buildable library using the `@nx/js:tsc` executor, using `tsc` as the compiler. You can change the compiler or the bundler by passing the `--bundler` flag.\n\n```bash\nnpx nx g lib libs/mylib --publishable\n```\n\n{% /tab %}\n\n{% tab label=\"In a nested directory\" %}\n\nGenerate a library named `mylib` and put it under a directory named `nested` (`libs/nested/mylib`).\n\n```shell\nnpx nx g lib libs/nested/mylib\n```\n\n{% /tab %}\n\n{% tab label=\"Non-buildable library\" %}\n\nGenerate a non-buildable library.\n\n```bash\nnpx nx g @nx/js:lib libs/mylib --bundler=none\n```\n\n{% /tab %}\n\n{% /tabs %}\n",
    "presets": []
  },
  "aliases": ["lib"],
  "x-type": "library",
  "description": "Create a library",
  "implementation": "/packages/js/src/generators/library/library#libraryGeneratorInternal.ts",
  "hidden": false,
  "path": "/packages/js/src/generators/library/schema.json",
  "type": "generator"
}
