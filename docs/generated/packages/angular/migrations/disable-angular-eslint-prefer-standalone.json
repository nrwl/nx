{
  "name": "disable-angular-eslint-prefer-standalone",
  "cli": "nx",
  "version": "20.2.0-beta.6",
  "requires": { "@angular/core": ">=19.0.0" },
  "description": "Disable the Angular ESLint prefer-standalone rule if not set.",
  "factory": "./src/migrations/update-20-2-0/disable-angular-eslint-prefer-standalone",
  "implementation": "/packages/angular/src/migrations/update-20-2-0/disable-angular-eslint-prefer-standalone.ts",
  "aliases": [],
  "hidden": false,
  "path": "/packages/angular",
  "schema": null,
  "type": "migration",
  "examplesFile": "#### Disable Angular ESLint Prefer Standalone\n\nDisable the Angular ESLint prefer-standalone rule if not set.\n\n#### Sample Code Changes\n\nUpdate import paths for `withModuleFederation` and `withModuleFederationForSSR`.\n\n{% tabs %}\n{% tab label=\"Before\" %}\n\n```json {% fileName=\"apps/app1/.eslintrc.json\" %}\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.html\"],\n      \"rules\": {\n        \"some-rule-for-html\": \"error\"\n      }\n    }\n  ]\n}\n```\n\n{% /tab %}\n{% tab label=\"After\" %}\n\n```json {% fileName=\"apps/app1/.eslintrc.json\" %}\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*.html\"],\n      \"rules\": {\n        \"some-rule-for-html\": \"error\"\n      }\n    },\n    {\n      \"files\": [\"*.ts\"],\n      \"rules\": {\n        \"@angular-eslint/prefer-standalone\": \"off\"\n      }\n    }\n  ]\n}\n```\n\n{% /tab %}\n{% /tabs %}\n\nimport {\naddProjectConfiguration,\nwriteJson,\ntype ProjectConfiguration,\ntype ProjectGraph,\ntype Tree,\n} from '@nx/devkit';\nimport { createTreeWithEmptyWorkspace } from '@nx/devkit/testing';\nimport migration from './disable-angular-eslint-prefer-standalone';\n\nlet projectGraph: ProjectGraph;\njest.mock('@nx/devkit', () => ({\n...jest.requireActual('@nx/devkit'),\ncreateProjectGraphAsync: () => Promise.resolve(projectGraph),\n}));\n\ndescribe('disable-angular-eslint-prefer-standalone', () => {\nlet tree: Tree;\n\nbeforeEach(() => {\ntree = createTreeWithEmptyWorkspace();\n\n    const projectConfig: ProjectConfiguration = {\n      name: 'app1',\n      root: 'apps/app1',\n    };\n    projectGraph = {\n      dependencies: {\n        app1: [\n          {\n            source: 'app1',\n            target: 'npm:@angular/core',\n            type: 'static',\n          },\n        ],\n      },\n      nodes: {\n        app1: {\n          data: projectConfig,\n          name: 'app1',\n          type: 'app',\n        },\n      },\n    };\n    addProjectConfiguration(tree, projectConfig.name, projectConfig);\n\n});\n\ndescribe('.eslintrc.json', () => {\nit('should not disable @angular-eslint/prefer-standalone when it is set', async () => {\nwriteJson(tree, 'apps/app1/.eslintrc.json', {\noverrides: [\n{\nfiles: ['*.ts'],\nrules: { '@angular-eslint/prefer-standalone': ['error'] },\n},\n],\n});\n\n      await migration(tree);\n\n      expect(tree.read('apps/app1/.eslintrc.json', 'utf8'))\n        .toMatchInlineSnapshot(`\n        \"{\n          \"overrides\": [\n            {\n              \"files\": [\"*.ts\"],\n              \"rules\": {\n                \"@angular-eslint/prefer-standalone\": [\"error\"]\n              }\n            }\n          ]\n        }\n        \"\n      `);\n    });\n\n    it('should not disable @angular-eslint/prefer-standalone when there are multiple overrides for angular eslint and the rule is set in one of them', async () => {\n      writeJson(tree, 'apps/app1/.eslintrc.json', {\n        overrides: [\n          {\n            files: ['*.ts'],\n            rules: {\n              '@angular-eslint/directive-selector': [\n                'error',\n                { type: 'attribute', prefix: 'app', style: 'camelCase' },\n              ],\n            },\n          },\n          {\n            files: ['*.ts'],\n            rules: { '@angular-eslint/prefer-standalone': ['error'] },\n          },\n        ],\n      });\n\n      await migration(tree);\n\n      expect(tree.read('apps/app1/.eslintrc.json', 'utf8'))\n        .toMatchInlineSnapshot(`\n        \"{\n          \"overrides\": [\n            {\n              \"files\": [\"*.ts\"],\n              \"rules\": {\n                \"@angular-eslint/directive-selector\": [\n                  \"error\",\n                  {\n                    \"type\": \"attribute\",\n                    \"prefix\": \"app\",\n                    \"style\": \"camelCase\"\n                  }\n                ]\n              }\n            },\n            {\n              \"files\": [\"*.ts\"],\n              \"rules\": {\n                \"@angular-eslint/prefer-standalone\": [\"error\"]\n              }\n            }\n          ]\n        }\n        \"\n      `);\n    });\n\n    it('should disable @angular-eslint/prefer-standalone in an existing override for angular eslint', async () => {\n      writeJson(tree, 'apps/app1/.eslintrc.json', {\n        overrides: [\n          {\n            files: ['*.ts'],\n            rules: { 'no-unused-vars': 'error' },\n          },\n          {\n            files: ['*.ts'],\n            rules: {\n              '@angular-eslint/directive-selector': [\n                'error',\n                { type: 'attribute', prefix: 'app', style: 'camelCase' },\n              ],\n            },\n          },\n        ],\n      });\n\n      await migration(tree);\n\n      expect(tree.read('apps/app1/.eslintrc.json', 'utf8'))\n        .toMatchInlineSnapshot(`\n        \"{\n          \"overrides\": [\n            {\n              \"files\": [\"*.ts\"],\n              \"rules\": {\n                \"no-unused-vars\": \"error\"\n              }\n            },\n            {\n              \"files\": [\"*.ts\"],\n              \"rules\": {\n                \"@angular-eslint/directive-selector\": [\n                  \"error\",\n                  {\n                    \"type\": \"attribute\",\n                    \"prefix\": \"app\",\n                    \"style\": \"camelCase\"\n                  }\n                ],\n                \"@angular-eslint/prefer-standalone\": \"off\"\n              }\n            }\n          ]\n        }\n        \"\n      `);\n    });\n\n    it('should disable @angular-eslint/prefer-standalone in an existing override for ts files', async () => {\n      writeJson(tree, 'apps/app1/.eslintrc.json', {\n        overrides: [\n          {\n            files: ['*.ts'],\n            rules: { 'no-unused-vars': 'error' },\n          },\n        ],\n      });\n\n      await migration(tree);\n\n      expect(tree.read('apps/app1/.eslintrc.json', 'utf8'))\n        .toMatchInlineSnapshot(`\n        \"{\n          \"overrides\": [\n            {\n              \"files\": [\"*.ts\"],\n              \"rules\": {\n                \"no-unused-vars\": \"error\",\n                \"@angular-eslint/prefer-standalone\": \"off\"\n              }\n            }\n          ]\n        }\n        \"\n      `);\n    });\n\n    it('should disable @angular-eslint/prefer-standalone in a new override', async () => {\n      writeJson(tree, 'apps/app1/.eslintrc.json', {\n        overrides: [\n          {\n            files: ['*.html'],\n            rules: { 'some-rule-for-html': 'error' },\n          },\n        ],\n      });\n\n      await migration(tree);\n\n      expect(tree.read('apps/app1/.eslintrc.json', 'utf8'))\n        .toMatchInlineSnapshot(`\n        \"{\n          \"overrides\": [\n            {\n              \"files\": [\"*.html\"],\n              \"rules\": {\n                \"some-rule-for-html\": \"error\"\n              }\n            },\n            {\n              \"files\": [\"*.ts\"],\n              \"rules\": {\n                \"@angular-eslint/prefer-standalone\": \"off\"\n              }\n            }\n          ]\n        }\n        \"\n      `);\n    });\n\n});\n\ndescribe('flat config', () => {\nit('should not disable @angular-eslint/prefer-standalone when it is set', async () => {\ntree.write('eslint.config.js', 'module.exports = [];');\ntree.write(\n'apps/app1/eslint.config.js',\n`module.exports = [\n          {\n            files: ['*.ts'],\n            rules: { '@angular-eslint/prefer-standalone': ['error'] },\n          },\n        ];\n        `\n);\n\n      await migration(tree);\n\n      expect(tree.read('apps/app1/eslint.config.js', 'utf8'))\n        .toMatchInlineSnapshot(`\n        \"module.exports = [\n          {\n            files: ['*.ts'],\n            rules: { '@angular-eslint/prefer-standalone': ['error'] },\n          },\n        ];\n        \"\n      `);\n    });\n\n    it('should not disable @angular-eslint/prefer-standalone when there are multiple overrides for angular eslint and the rule is set in one of them', async () => {\n      tree.write('eslint.config.js', 'module.exports = [];');\n      tree.write(\n        'apps/app1/eslint.config.js',\n        `module.exports = [\n          {\n            files: ['*.ts'],\n            rules: {\n              '@angular-eslint/directive-selector': [\n                'error',\n                { type: 'attribute', prefix: 'app', style: 'camelCase' },\n              ],\n            },\n          },\n          {\n            files: ['*.ts'],\n            rules: { '@angular-eslint/prefer-standalone': ['error'] },\n          },\n        ];\n        `\n      );\n\n      await migration(tree);\n\n      expect(tree.read('apps/app1/eslint.config.js', 'utf8'))\n        .toMatchInlineSnapshot(`\n        \"module.exports = [\n          {\n            files: ['*.ts'],\n            rules: {\n              '@angular-eslint/directive-selector': [\n                'error',\n                { type: 'attribute', prefix: 'app', style: 'camelCase' },\n              ],\n            },\n          },\n          {\n            files: ['*.ts'],\n            rules: { '@angular-eslint/prefer-standalone': ['error'] },\n          },\n        ];\n        \"\n      `);\n    });\n\n    it('should disable @angular-eslint/prefer-standalone in an existing override for angular eslint', async () => {\n      tree.write('eslint.config.js', 'module.exports = [];');\n      tree.write(\n        'apps/app1/eslint.config.js',\n        `module.exports = [\n          {\n            files: ['*.ts'],\n            rules: { 'no-unused-vars': 'error' },\n          },\n          {\n            files: ['*.ts'],\n            rules: {\n              '@angular-eslint/directive-selector': [\n                'error',\n                { type: 'attribute', prefix: 'app', style: 'camelCase' },\n              ],\n            },\n          },\n        ];\n        `\n      );\n\n      await migration(tree);\n\n      expect(tree.read('apps/app1/eslint.config.js', 'utf8'))\n        .toMatchInlineSnapshot(`\n        \"module.exports = [\n          {\n            files: ['*.ts'],\n            rules: { 'no-unused-vars': 'error' },\n          },\n          {\n            files: ['**/*.ts'],\n            rules: {\n              '@angular-eslint/directive-selector': [\n                'error',\n                {\n                  type: 'attribute',\n                  prefix: 'app',\n                  style: 'camelCase',\n                },\n              ],\n              '@angular-eslint/prefer-standalone': 'off',\n            },\n          },\n        ];\n        \"\n      `);\n    });\n\n    it('should disable @angular-eslint/prefer-standalone in an existing override for ts files', async () => {\n      tree.write('eslint.config.js', 'module.exports = [];');\n      tree.write(\n        'apps/app1/eslint.config.js',\n        `module.exports = [\n          {\n            files: ['*.ts'],\n            rules: { 'no-unused-vars': 'error' },\n          },\n        ];\n        `\n      );\n\n      await migration(tree);\n\n      expect(tree.read('apps/app1/eslint.config.js', 'utf8'))\n        .toMatchInlineSnapshot(`\n        \"module.exports = [\n          {\n            files: ['**/*.ts'],\n            rules: {\n              'no-unused-vars': 'error',\n              '@angular-eslint/prefer-standalone': 'off',\n            },\n          },\n        ];\n        \"\n      `);\n    });\n\n    it('should disable @angular-eslint/prefer-standalone in a new override', async () => {\n      tree.write('eslint.config.js', 'module.exports = [];');\n      tree.write(\n        'apps/app1/eslint.config.js',\n        `module.exports = [\n          {\n            files: ['*.html'],\n            rules: { 'some-rule-for-html': 'error' },\n          },\n        ];\n        `\n      );\n\n      await migration(tree);\n\n      expect(tree.read('apps/app1/eslint.config.js', 'utf8'))\n        .toMatchInlineSnapshot(`\n        \"module.exports = [\n          {\n            files: ['*.html'],\n            rules: { 'some-rule-for-html': 'error' },\n          },\n          {\n            files: ['**/*.ts'],\n            rules: {\n              '@angular-eslint/prefer-standalone': 'off',\n            },\n          },\n        ];\n        \"\n      `);\n    });\n\n});\n});\n"
}
