TCP FRAGMENTATION BUG - Visual Explanation
===========================================

SCENARIO: Plugin worker sends response back to main process

┌─────────────────────────────────────────────────────────────────────┐
│ STEP 1: Worker Sends Complete Message                               │
└─────────────────────────────────────────────────────────────────────┘

  Plugin Worker Process:
  ┌────────────────────────────────────────────────────────────────┐
  │ socket.write(JSON.stringify(result) + MESSAGE_END_SEQ)         │
  │                                                                 │
  │ Sends: '{"type":"createNodesResult","payload":{...}}NX_MSG_END\x04' │
  │        └──────────────── 4579 bytes ────────────────┘          │
  └────────────────────────────────────────────────────────────────┘
                                  │
                                  ▼
                           TCP/IP Network
                    (Fragments into 2 packets)
                                  │
                    ┌─────────────┴──────────────┐
                    ▼                            ▼
             ┌──────────────┐           ┌──────────────┐
             │   Packet 1   │           │   Packet 2   │
             │  4560 bytes  │           │   19 bytes   │
             │              │           │              │
             │ '{"type":... │           │   'ND\x04'   │
             │  ...}NX_MSG_E'│           │              │
             └──────────────┘           └──────────────┘


┌─────────────────────────────────────────────────────────────────────┐
│ STEP 2: Main Process Receives Chunk 1                               │
└─────────────────────────────────────────────────────────────────────┘

  Main Process (plugin-pool.ts):
  ┌────────────────────────────────────────────────────────────────┐
  │ consumeMessagesFromSocket() receives data event                 │
  │                                                                 │
  │ chunk = '{"type":"createNodesResult",...}NX_MSG_E'             │
  │                                                                 │
  │ ❓ Does chunk.endsWith('NX_MSG_END\x04')?                      │
  │ ❌ NO! It ends with 'NX_MSG_E', not the complete sequence     │
  │                                                                 │
  │ Action: message += chunk  // Accumulate and wait...            │
  │         message = '{"type":"createNodesResult",...}NX_MSG_E'   │
  └────────────────────────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────┐
│ STEP 3: Main Process Receives Chunk 2                               │
└─────────────────────────────────────────────────────────────────────┘

  Main Process:
  ┌────────────────────────────────────────────────────────────────┐
  │ chunk = 'ND\x04'                                                │
  │                                                                 │
  │ ❓ Does chunk.endsWith('NX_MSG_END\x04')?                      │
  │ ❌ NO! It's only 'ND\x04', not the complete sequence          │
  │                                                                 │
  │ Action: message += chunk  // Accumulate more...                │
  │         message = '{"type":"createNodesResult",...}NX_MSG_END\x04' │
  │                                                                 │
  │ 🐛 BUG: The complete message is now in buffer!                 │
  │    But we only check chunk.endsWith(), not message.endsWith()! │
  │    So we never process it!                                     │
  └────────────────────────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────┐
│ STEP 4: Eternal Wait (Hang)                                         │
└─────────────────────────────────────────────────────────────────────┘

  Main Process:
  ┌────────────────────────────────────────────────────────────────┐
  │ message = '{"type":"createNodesResult",...}NX_MSG_END\x04'     │
  │                                                                 │
  │ ⏰ Waiting for more chunks...                                   │
  │    (But all chunks have arrived!)                              │
  │                                                                 │
  │ ⏰ Waiting... (1 minute)                                        │
  │ ⏰ Waiting... (5 minutes)                                       │
  │ ⏰ Waiting... (9 minutes)                                       │
  │                                                                 │
  │ ⏰ TIMEOUT after 10 minutes!                                    │
  │ ❌ Error: "@nx/gradle timed out during createNodes"            │
  └────────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════
THE FIX
═══════════════════════════════════════════════════════════════════════

BEFORE (Broken):
┌────────────────────────────────────────────────────────────────┐
│ if (chunk.endsWith(MESSAGE_END_SEQ)) {  // ❌ Wrong!           │
│   // Process messages                                          │
│ } else {                                                        │
│   message += chunk;  // Accumulate forever                     │
│ }                                                               │
└────────────────────────────────────────────────────────────────┘

AFTER (Fixed):
┌────────────────────────────────────────────────────────────────┐
│ message += chunk;  // Always accumulate first                  │
│                                                                 │
│ if (message.endsWith(MESSAGE_END_SEQ)) {  // ✅ Correct!      │
│   // Process messages from accumulated buffer                  │
│   message = '';  // Clear buffer                               │
│ }                                                               │
└────────────────────────────────────────────────────────────────┘

With the fix, Step 3 becomes:
┌────────────────────────────────────────────────────────────────┐
│ chunk = 'ND\x04'                                                │
│ message += chunk                                                │
│ message = '{"type":"createNodesResult",...}NX_MSG_END\x04'     │
│                                                                 │
│ ❓ Does message.endsWith('NX_MSG_END\x04')?                    │
│ ✅ YES! Process the message!                                   │
│                                                                 │
│ Action: Parse JSON, call callback with result                  │
│         Promise resolves immediately ✅                         │
└────────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════
WHY THIS HAPPENS MORE NOW
═══════════════════════════════════════════════════════════════════════

OLD DELIMITER: '\x04'  (1 byte)
  → Rarely split across packets
  → Bug rarely manifests

NEW DELIMITER: 'NX_MSG_END\x04'  (12 bytes)
  → Frequently split across packets
  → Bug manifests often
  → Especially with large messages (gradle plugin returns large configs)

TCP packet boundaries are arbitrary and depend on:
  - Network conditions
  - Buffer sizes
  - Timing
  - Message size
  → That's why the bug is intermittent!
